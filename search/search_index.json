{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#plotnine-prism","title":"plotnine-prism","text":"<p>Prism themes for plotnine, inspired by ggprism.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U plotnine-prism\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>https://pwwang.github.io/plotnine-prism</p>"},{"location":"#usage","title":"Usage","text":"<p>See this notebook for the following example, and also Getting started for a quick overview of <code>plotnine_prism</code> features.</p> <pre><code>from plotnine import *\nfrom plotnine_prism import *\n\nfrom datar.all import f, as_categorical, mutate\nfrom datar.datasets import ToothGrowth\n\nToothGrowth &gt;&gt;= mutate(dose=as_categorical(f.dose))\n\nbase = (\n    ggplot(ToothGrowth, aes(x = \"dose\", y = \"len\")) +\n    geom_violin(aes(colour = \"dose\", fill = \"dose\"), trim = False) +\n    geom_boxplot(aes(fill = \"dose\"), width = 0.2, colour = \"black\")\n)\n\np1 = base + ylim(-5, 40)\np2 = (\n    base +\n    scale_y_continuous(limits=[-5, 40], guide=guide_prism_offset_minor()) +\n    scale_color_prism('floral') +\n    scale_fill_prism('floral') +\n    theme_prism()\n)\n# See examples/nb_helpers.py for plot_grid function\n# plot_grid(p1, p2)\n</code></pre>"},{"location":"#more-examples","title":"More examples","text":"<p>The Dose Response Curve was recreated. See this vignette for the source code and step-by-step instructions.</p>"},{"location":"CHANGELOG/","title":"Change Log","text":""},{"location":"CHANGELOG/#change-log","title":"Change Log","text":""},{"location":"CHANGELOG/#033","title":"0.3.3","text":"<ul> <li>docs: fix two links in main README, and presumably resulting documentation</li> <li>fix(#4): fix axis_title_x being overlapping with x ticks</li> </ul>"},{"location":"CHANGELOG/#032","title":"0.3.2","text":"<ul> <li>chore: update Python version and dependencies in pyproject.toml</li> </ul>"},{"location":"CHANGELOG/#031","title":"0.3.1","text":"<ul> <li>fix: fix file opening in theme_colors function (#2)</li> <li>ci: update Python versions and actions in build workflow</li> <li>chore: update datar version in dev dependencies</li> <li>docs: enhance documentation workflow and update dependencies</li> <li>ci: update Python version and actions in documentation workflow</li> </ul>"},{"location":"CHANGELOG/#030","title":"0.3.0","text":"<ul> <li>Bump plotnine to 0.12</li> </ul>"},{"location":"CHANGELOG/#020","title":"0.2.0","text":"<ul> <li>\u2b06\ufe0f Bump plotnine to 0.10</li> <li>\ud83d\udccc Drop support for Python 3.7</li> <li>\ud83d\udc77 Update CI</li> <li>\ud83d\udea8 Fix linting issue</li> </ul>"},{"location":"CHANGELOG/#010","title":"0.1.0","text":"<ul> <li>\ud83d\udccc Use rtoml instead of toml</li> </ul>"},{"location":"CHANGELOG/#000","title":"0.0.0","text":"<ul> <li>Init</li> </ul>"},{"location":"api/plotnine_prism.guide/","title":"plotnine_prism.guide","text":"module &lt;/&gt; <p>Provides guides</p> Classes <ul> <li><code>guide_prism_offset</code> \u2014 The prism offset guide that offset the axes&lt;/&gt;</li> <li><code>guide_prism</code> \u2014 The prism offset guide that hides the minor ticks&lt;/&gt;</li> <li><code>guide_prism_minor</code> \u2014 The prism offset guide that shows the minor ticks&lt;/&gt;</li> <li><code>guide_prism_offset_minor</code> \u2014 The prism offset guide that shows the minor ticks with offset&lt;/&gt;</li> </ul> class &lt;/&gt; Bases plotnine.guides.guide.guide <p>The prism offset guide that offset the axes</p> Methods <ul> <li><code>create_geoms</code><code>(</code><code>plot</code><code>)</code> \u2014 Apply the arguments&lt;/&gt;</li> <li><code>draw</code><code>(</code><code>)</code> \u2014 Nothing to do&lt;/&gt;</li> <li><code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code> (matched : list) \u2014 Return the aesthetics that contribute to the legend&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Simply discards the other guide&lt;/&gt;</li> <li><code>train</code><code>(</code><code>scale</code>, <code>aesthetic</code><code>)</code> \u2014 Get arguments from the scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Return the aesthetics that contribute to the legend</p> Parameters <ul> <li><code>layer</code> (Layer) \u2014 Layer whose legend is to be drawn</li> <li><code>plot</code> (ggplot) \u2014 Plot object</li> </ul> Returns (matched : list) <p>List of the names of the aethetics that contributeto the legend.</p> method &lt;/&gt; <p>Get arguments from the scale</p> method &lt;/&gt; <p>Apply the arguments</p> method &lt;/&gt; <p>Simply discards the other guide</p> method &lt;/&gt; <p>Nothing to do</p> class &lt;/&gt; Bases plotnine_prism.guide.guide_prism_offset plotnine.guides.guide.guide <p>The prism offset guide that hides the minor ticks</p> Methods <ul> <li><code>create_geoms</code><code>(</code><code>plot</code><code>)</code> \u2014 Apply the arguments&lt;/&gt;</li> <li><code>draw</code><code>(</code><code>)</code> \u2014 Nothing to do&lt;/&gt;</li> <li><code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code> (matched : list) \u2014 Return the aesthetics that contribute to the legend&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Simply discards the other guide&lt;/&gt;</li> <li><code>train</code><code>(</code><code>scale</code>, <code>aesthetic</code><code>)</code> \u2014 Get arguments from the scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Return the aesthetics that contribute to the legend</p> Parameters <ul> <li><code>layer</code> (Layer) \u2014 Layer whose legend is to be drawn</li> <li><code>plot</code> (ggplot) \u2014 Plot object</li> </ul> Returns (matched : list) <p>List of the names of the aethetics that contributeto the legend.</p> method &lt;/&gt; <p>Get arguments from the scale</p> method &lt;/&gt; <p>Simply discards the other guide</p> method &lt;/&gt; <p>Nothing to do</p> method &lt;/&gt; <p>Apply the arguments</p> class &lt;/&gt; Bases plotnine_prism.guide.guide_prism_offset plotnine.guides.guide.guide <p>The prism offset guide that shows the minor ticks</p> Methods <ul> <li><code>create_geoms</code><code>(</code><code>plot</code><code>)</code> \u2014 Apply the arguments&lt;/&gt;</li> <li><code>draw</code><code>(</code><code>)</code> \u2014 Nothing to do&lt;/&gt;</li> <li><code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code> (matched : list) \u2014 Return the aesthetics that contribute to the legend&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Simply discards the other guide&lt;/&gt;</li> <li><code>train</code><code>(</code><code>scale</code>, <code>aesthetic</code><code>)</code> \u2014 Get arguments from the scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Return the aesthetics that contribute to the legend</p> Parameters <ul> <li><code>layer</code> (Layer) \u2014 Layer whose legend is to be drawn</li> <li><code>plot</code> (ggplot) \u2014 Plot object</li> </ul> Returns (matched : list) <p>List of the names of the aethetics that contributeto the legend.</p> method &lt;/&gt; <p>Get arguments from the scale</p> method &lt;/&gt; <p>Simply discards the other guide</p> method &lt;/&gt; <p>Nothing to do</p> method &lt;/&gt; <p>Apply the arguments</p> class &lt;/&gt; Bases plotnine_prism.guide.guide_prism_offset plotnine.guides.guide.guide <p>The prism offset guide that shows the minor ticks with offset</p> Methods <ul> <li><code>create_geoms</code><code>(</code><code>plot</code><code>)</code> \u2014 Apply the arguments&lt;/&gt;</li> <li><code>draw</code><code>(</code><code>)</code> \u2014 Nothing to do&lt;/&gt;</li> <li><code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code> (matched : list) \u2014 Return the aesthetics that contribute to the legend&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Simply discards the other guide&lt;/&gt;</li> <li><code>train</code><code>(</code><code>scale</code>, <code>aesthetic</code><code>)</code> \u2014 Get arguments from the scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Return the aesthetics that contribute to the legend</p> Parameters <ul> <li><code>layer</code> (Layer) \u2014 Layer whose legend is to be drawn</li> <li><code>plot</code> (ggplot) \u2014 Plot object</li> </ul> Returns (matched : list) <p>List of the names of the aethetics that contributeto the legend.</p> method &lt;/&gt; <p>Get arguments from the scale</p> method &lt;/&gt; <p>Simply discards the other guide</p> method &lt;/&gt; <p>Nothing to do</p> method &lt;/&gt; <p>Apply the arguments</p>"},{"location":"api/plotnine_prism.guide/#plotnine_prismguide","title":"plotnine_prism.guide","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offset","title":"<code>plotnine_prism.guide.</code><code>guide_prism_offset</code><code>(</code><code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnineguidesguideguidelegend_aesthetics","title":"<code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsettrain","title":"<code>train</code><code>(</code><code>scale</code>, <code>aesthetic=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetcreate_geoms","title":"<code>create_geoms</code><code>(</code><code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetmerge","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetdraw","title":"<code>draw</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism","title":"<code>plotnine_prism.guide.</code><code>guide_prism</code><code>(</code><code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnineguidesguideguidelegend_aesthetics_1","title":"<code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsettrain_1","title":"<code>train</code><code>(</code><code>scale</code>, <code>aesthetic=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetmerge_1","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetdraw_1","title":"<code>draw</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prismcreate_geoms","title":"<code>create_geoms</code><code>(</code><code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_minor","title":"<code>plotnine_prism.guide.</code><code>guide_prism_minor</code><code>(</code><code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnineguidesguideguidelegend_aesthetics_2","title":"<code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsettrain_2","title":"<code>train</code><code>(</code><code>scale</code>, <code>aesthetic=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetmerge_2","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetdraw_2","title":"<code>draw</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_minorcreate_geoms","title":"<code>create_geoms</code><code>(</code><code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offset_minor","title":"<code>plotnine_prism.guide.</code><code>guide_prism_offset_minor</code><code>(</code><code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnineguidesguideguidelegend_aesthetics_3","title":"<code>legend_aesthetics</code><code>(</code><code>layer</code>, <code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsettrain_3","title":"<code>train</code><code>(</code><code>scale</code>, <code>aesthetic=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetmerge_3","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offsetdraw_3","title":"<code>draw</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.guide/#plotnine_prismguideguide_prism_offset_minorcreate_geoms","title":"<code>create_geoms</code><code>(</code><code>plot</code><code>)</code>","text":""},{"location":"api/plotnine_prism/","title":"plotnine_prism","text":"package &lt;/&gt; <p>Prism themes for plotnine, inspired by ggprism</p> module &lt;/&gt; <p>Provides guides</p> Classes <ul> <li><code>guide_prism_offset</code> \u2014 The prism offset guide that offset the axes&lt;/&gt;</li> <li><code>guide_prism</code> \u2014 The prism offset guide that hides the minor ticks&lt;/&gt;</li> <li><code>guide_prism_minor</code> \u2014 The prism offset guide that shows the minor ticks&lt;/&gt;</li> <li><code>guide_prism_offset_minor</code> \u2014 The prism offset guide that shows the minor ticks with offset&lt;/&gt;</li> </ul> module &lt;/&gt; <p>Provides theme_prism</p> Classes <ul> <li><code>theme_prism</code> \u2014 The theme_prism() class&lt;/&gt;</li> </ul> module &lt;/&gt; <p>Provides available palettes</p> Functions <ul> <li><code>list_color_pals</code><code>(</code><code>)</code> \u2014 List all available color palettes&lt;/&gt;</li> <li><code>list_fill_pals</code><code>(</code><code>)</code> \u2014 List all available fill palettes&lt;/&gt;</li> <li><code>list_shape_pals</code><code>(</code><code>)</code> \u2014 List all available shape palettes&lt;/&gt;</li> <li><code>list_themes</code><code>(</code><code>)</code> \u2014 List all available theme palettes&lt;/&gt;</li> <li><code>prism_color_pal</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the prism color palette by name&lt;/&gt;</li> <li><code>prism_fill_pal</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the prism fill palette by name&lt;/&gt;</li> <li><code>prism_shape_pal</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the prism shape palette by name&lt;/&gt;</li> <li><code>theme_colors</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the colors for a specific theme&lt;/&gt;</li> </ul> module &lt;/&gt; <p>Provides scales</p> Classes <ul> <li><code>scale_color_prism</code> \u2014 Prism color scale&lt;/&gt;</li> <li><code>scale_fill_prism</code> \u2014 Prism fill scale&lt;/&gt;</li> <li><code>scale_shape_prism</code> \u2014 Prism shape scale&lt;/&gt;</li> </ul> module &lt;/&gt; <p>Add themeables for theme_prism</p> Classes <ul> <li><code>axis_ticks_x</code> \u2014 Themeable for ticks on x axis that is missing in plotnine&lt;/&gt;</li> <li><code>axis_ticks_y</code> \u2014 Themeable for ticks on y axis that is missing in plotnine&lt;/&gt;</li> <li><code>prism_ticks_length_x</code> \u2014 Themeable for ticks length on x axis&lt;/&gt;</li> <li><code>prism_ticks_length_y</code> \u2014 Themeable for ticks length on y axis&lt;/&gt;</li> <li><code>prism_ticks_length</code> \u2014 Themeable for ticks length&lt;/&gt;</li> </ul>"},{"location":"api/plotnine_prism/#plotnine_prism","title":"plotnine_prism","text":""},{"location":"api/plotnine_prism/#plotnine_prismguide","title":"plotnine_prism.guide","text":""},{"location":"api/plotnine_prism/#plotnine_prismtheme","title":"plotnine_prism.theme","text":""},{"location":"api/plotnine_prism/#plotnine_prismpal","title":"plotnine_prism.pal","text":""},{"location":"api/plotnine_prism/#plotnine_prismscale","title":"plotnine_prism.scale","text":""},{"location":"api/plotnine_prism/#plotnine_prismthemeable","title":"plotnine_prism.themeable","text":""},{"location":"api/plotnine_prism.pal/","title":"plotnine_prism.pal","text":"module &lt;/&gt; <p>Provides available palettes</p> Functions <ul> <li><code>list_color_pals</code><code>(</code><code>)</code> \u2014 List all available color palettes&lt;/&gt;</li> <li><code>list_fill_pals</code><code>(</code><code>)</code> \u2014 List all available fill palettes&lt;/&gt;</li> <li><code>list_shape_pals</code><code>(</code><code>)</code> \u2014 List all available shape palettes&lt;/&gt;</li> <li><code>list_themes</code><code>(</code><code>)</code> \u2014 List all available theme palettes&lt;/&gt;</li> <li><code>prism_color_pal</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the prism color palette by name&lt;/&gt;</li> <li><code>prism_fill_pal</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the prism fill palette by name&lt;/&gt;</li> <li><code>prism_shape_pal</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the prism shape palette by name&lt;/&gt;</li> <li><code>theme_colors</code><code>(</code><code>palette</code><code>)</code> \u2014 Get the colors for a specific theme&lt;/&gt;</li> </ul> function &lt;/&gt; <p>List all available theme palettes</p> function &lt;/&gt; <p>Get the colors for a specific theme</p> function &lt;/&gt; <p>List all available color palettes</p> function &lt;/&gt; <p>List all available fill palettes</p> function &lt;/&gt; <p>List all available shape palettes</p> function &lt;/&gt; <p>Get the prism color palette by name</p> function &lt;/&gt; <p>Get the prism fill palette by name</p> function &lt;/&gt; <p>Get the prism shape palette by name</p>"},{"location":"api/plotnine_prism.pal/#plotnine_prismpal","title":"plotnine_prism.pal","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpallist_themes","title":"<code>plotnine_prism.pal.</code><code>list_themes</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpaltheme_colors","title":"<code>plotnine_prism.pal.</code><code>theme_colors</code><code>(</code><code>palette</code><code>)</code>","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpallist_color_pals","title":"<code>plotnine_prism.pal.</code><code>list_color_pals</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpallist_fill_pals","title":"<code>plotnine_prism.pal.</code><code>list_fill_pals</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpallist_shape_pals","title":"<code>plotnine_prism.pal.</code><code>list_shape_pals</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpalprism_color_pal","title":"<code>plotnine_prism.pal.</code><code>prism_color_pal</code><code>(</code><code>palette</code><code>)</code>","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpalprism_fill_pal","title":"<code>plotnine_prism.pal.</code><code>prism_fill_pal</code><code>(</code><code>palette</code><code>)</code>","text":""},{"location":"api/plotnine_prism.pal/#plotnine_prismpalprism_shape_pal","title":"<code>plotnine_prism.pal.</code><code>prism_shape_pal</code><code>(</code><code>palette</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/","title":"plotnine_prism.scale","text":"module &lt;/&gt; <p>Provides scales</p> Classes <ul> <li><code>scale_color_prism</code> \u2014 Prism color scale&lt;/&gt;</li> <li><code>scale_fill_prism</code> \u2014 Prism fill scale&lt;/&gt;</li> <li><code>scale_shape_prism</code> \u2014 Prism shape scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Return minor breaks</p><p>See https://github.com/has2k1/plotnine/issues/696</p> method &lt;/&gt; <p>Generate labels for the axis or legend</p> Parameters <ul> <li><code>breaks</code> (None or array-like) \u2014 If None, use self.breaks.</li> </ul> class &lt;/&gt; Bases plotnine.scales.scale.scale_discrete plotnine.scales.scale.scale <p>Prism color scale</p> Parameters <ul> <li><code>palette</code> (optional) \u2014 The color palette name</li> </ul> Methods <ul> <li><code>__radd__</code><code>(</code><code>gg</code><code>)</code> \u2014 Add this scale to ggplot object&lt;/&gt;</li> <li><code>default_expansion</code><code>(</code><code>mult</code>, <code>add</code>, <code>expand</code><code>)</code> \u2014 Get the default expansion for a discrete scale&lt;/&gt;</li> <li><code>dimension</code><code>(</code><code>expand</code>, <code>limits</code><code>)</code> \u2014 Get the phyical size of the scale&lt;/&gt;</li> <li><code>expand_limits</code><code>(</code><code>limits</code>, <code>expand</code>, <code>coord_limits</code>, <code>trans</code><code>)</code> (range_view) \u2014 Calculate the final range in coordinate space&lt;/&gt;</li> <li><code>get_bounded_breaks</code><code>(</code><code>limits</code><code>)</code> (ScaleDiscreteBreaks) \u2014 Return Breaks that are within limits&lt;/&gt;</li> <li><code>get_breaks</code><code>(</code><code>limits</code><code>)</code> (ScaleDiscreteBreaks) \u2014 Return an ordered list of breaks&lt;/&gt;</li> <li><code>get_labels</code><code>(</code><code>breaks</code><code>)</code> (ScaleLabels) \u2014 Generate labels for the legend/guide breaks&lt;/&gt;</li> <li><code>inverse</code><code>(</code><code>x</code><code>)</code> \u2014 Inverse transform array|series x&lt;/&gt;</li> <li><code>is_empty</code><code>(</code><code>)</code> (bool) \u2014 Whether the scale has size information&lt;/&gt;</li> <li><code>map</code><code>(</code><code>x</code>, <code>limits</code><code>)</code> (Sequence[Any]) \u2014 Map values in x to a palette&lt;/&gt;</li> <li><code>map_df</code><code>(</code><code>df</code><code>)</code> (DataFrame) \u2014 Map df&lt;/&gt;</li> <li><code>palette</code><code>(</code><code>n</code><code>)</code> (Sequence[Any]) \u2014 Aesthetic mapping function&lt;/&gt;</li> <li><code>reset</code><code>(</code><code>)</code> \u2014 Set the range of the scale to None.&lt;/&gt;</li> <li><code>train</code><code>(</code><code>x</code>, <code>drop</code><code>)</code> \u2014 Train scale&lt;/&gt;</li> <li><code>train_df</code><code>(</code><code>df</code><code>)</code> \u2014 Train scale from a dataframe&lt;/&gt;</li> <li><code>transform</code><code>(</code><code>x</code><code>)</code> \u2014 Transform array|series x&lt;/&gt;</li> <li><code>transform_df</code><code>(</code><code>df</code><code>)</code> (DataFrame) \u2014 Transform dataframe&lt;/&gt;</li> <li><code>view</code><code>(</code><code>limits</code>, <code>range</code><code>)</code> (scale_view) \u2014 Information about the trained scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Add this scale to ggplot object</p> method &lt;/&gt; <p>Inverse transform array|series x</p> method &lt;/&gt; <p>Set the range of the scale to None.</p><p>i.e Forget all the training</p> method &lt;/&gt; <p>Whether the scale has size information</p> method &lt;/&gt; <p>Train scale from a dataframe</p> method &lt;/&gt; <p>Map df</p> staticmethod &lt;/&gt; <p>Aesthetic mapping function</p> method &lt;/&gt; <p>Train scale</p> Parameters <ul> <li><code>x</code> (pd.series | np.array) \u2014 a column of data to train over</li> <li><code>drop</code> (bool) \u2014 Whether to drop(not include) unused categories</li> </ul> method &lt;/&gt; <p>Get the phyical size of the scale</p><p>Unlike limits, this always returns a numeric vector of length 2</p> method &lt;/&gt; <p>Calculate the final range in coordinate space</p> method &lt;/&gt; <p>Information about the trained scale</p> method &lt;/&gt; <p>Get the default expansion for a discrete scale</p> method &lt;/&gt; <p>Map values in x to a palette</p> method &lt;/&gt; <p>Return an ordered list of breaks</p><p>The form is suitable for use by the guides e.g.     ['fair', 'good', 'very good', 'premium', 'ideal']</p> method &lt;/&gt; <p>Return Breaks that are within limits</p> method &lt;/&gt; <p>Generate labels for the legend/guide breaks</p> method &lt;/&gt; <p>Transform dataframe</p> method &lt;/&gt; <p>Transform array|series x</p> class &lt;/&gt; Bases plotnine_prism.scale.scale_color_prism plotnine.scales.scale.scale_discrete plotnine.scales.scale.scale <p>Prism fill scale</p> Parameters <ul> <li><code>palette</code> (optional) \u2014 The fill palette name</li> </ul> Methods <ul> <li><code>__radd__</code><code>(</code><code>gg</code><code>)</code> \u2014 Add this scale to ggplot object&lt;/&gt;</li> <li><code>default_expansion</code><code>(</code><code>mult</code>, <code>add</code>, <code>expand</code><code>)</code> \u2014 Get the default expansion for a discrete scale&lt;/&gt;</li> <li><code>dimension</code><code>(</code><code>expand</code>, <code>limits</code><code>)</code> \u2014 Get the phyical size of the scale&lt;/&gt;</li> <li><code>expand_limits</code><code>(</code><code>limits</code>, <code>expand</code>, <code>coord_limits</code>, <code>trans</code><code>)</code> (range_view) \u2014 Calculate the final range in coordinate space&lt;/&gt;</li> <li><code>get_bounded_breaks</code><code>(</code><code>limits</code><code>)</code> (ScaleDiscreteBreaks) \u2014 Return Breaks that are within limits&lt;/&gt;</li> <li><code>get_breaks</code><code>(</code><code>limits</code><code>)</code> (ScaleDiscreteBreaks) \u2014 Return an ordered list of breaks&lt;/&gt;</li> <li><code>get_labels</code><code>(</code><code>breaks</code><code>)</code> (ScaleLabels) \u2014 Generate labels for the legend/guide breaks&lt;/&gt;</li> <li><code>inverse</code><code>(</code><code>x</code><code>)</code> \u2014 Inverse transform array|series x&lt;/&gt;</li> <li><code>is_empty</code><code>(</code><code>)</code> (bool) \u2014 Whether the scale has size information&lt;/&gt;</li> <li><code>map</code><code>(</code><code>x</code>, <code>limits</code><code>)</code> (Sequence[Any]) \u2014 Map values in x to a palette&lt;/&gt;</li> <li><code>map_df</code><code>(</code><code>df</code><code>)</code> (DataFrame) \u2014 Map df&lt;/&gt;</li> <li><code>palette</code><code>(</code><code>n</code><code>)</code> (Sequence[Any]) \u2014 Aesthetic mapping function&lt;/&gt;</li> <li><code>reset</code><code>(</code><code>)</code> \u2014 Set the range of the scale to None.&lt;/&gt;</li> <li><code>train</code><code>(</code><code>x</code>, <code>drop</code><code>)</code> \u2014 Train scale&lt;/&gt;</li> <li><code>train_df</code><code>(</code><code>df</code><code>)</code> \u2014 Train scale from a dataframe&lt;/&gt;</li> <li><code>transform</code><code>(</code><code>x</code><code>)</code> \u2014 Transform array|series x&lt;/&gt;</li> <li><code>transform_df</code><code>(</code><code>df</code><code>)</code> (DataFrame) \u2014 Transform dataframe&lt;/&gt;</li> <li><code>view</code><code>(</code><code>limits</code>, <code>range</code><code>)</code> (scale_view) \u2014 Information about the trained scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Add this scale to ggplot object</p> method &lt;/&gt; <p>Inverse transform array|series x</p> method &lt;/&gt; <p>Set the range of the scale to None.</p><p>i.e Forget all the training</p> method &lt;/&gt; <p>Whether the scale has size information</p> method &lt;/&gt; <p>Train scale from a dataframe</p> method &lt;/&gt; <p>Map df</p> staticmethod &lt;/&gt; <p>Aesthetic mapping function</p> method &lt;/&gt; <p>Train scale</p> Parameters <ul> <li><code>x</code> (pd.series | np.array) \u2014 a column of data to train over</li> <li><code>drop</code> (bool) \u2014 Whether to drop(not include) unused categories</li> </ul> method &lt;/&gt; <p>Get the phyical size of the scale</p><p>Unlike limits, this always returns a numeric vector of length 2</p> method &lt;/&gt; <p>Calculate the final range in coordinate space</p> method &lt;/&gt; <p>Information about the trained scale</p> method &lt;/&gt; <p>Get the default expansion for a discrete scale</p> method &lt;/&gt; <p>Map values in x to a palette</p> method &lt;/&gt; <p>Return an ordered list of breaks</p><p>The form is suitable for use by the guides e.g.     ['fair', 'good', 'very good', 'premium', 'ideal']</p> method &lt;/&gt; <p>Return Breaks that are within limits</p> method &lt;/&gt; <p>Generate labels for the legend/guide breaks</p> method &lt;/&gt; <p>Transform dataframe</p> method &lt;/&gt; <p>Transform array|series x</p> class &lt;/&gt; Bases plotnine.scales.scale.scale_discrete plotnine.scales.scale.scale <p>Prism shape scale</p> Parameters <ul> <li><code>palette</code> (optional) \u2014 The shape palette name</li> </ul> Methods <ul> <li><code>__radd__</code><code>(</code><code>gg</code><code>)</code> \u2014 Add this scale to ggplot object&lt;/&gt;</li> <li><code>default_expansion</code><code>(</code><code>mult</code>, <code>add</code>, <code>expand</code><code>)</code> \u2014 Get the default expansion for a discrete scale&lt;/&gt;</li> <li><code>dimension</code><code>(</code><code>expand</code>, <code>limits</code><code>)</code> \u2014 Get the phyical size of the scale&lt;/&gt;</li> <li><code>expand_limits</code><code>(</code><code>limits</code>, <code>expand</code>, <code>coord_limits</code>, <code>trans</code><code>)</code> (range_view) \u2014 Calculate the final range in coordinate space&lt;/&gt;</li> <li><code>get_bounded_breaks</code><code>(</code><code>limits</code><code>)</code> (ScaleDiscreteBreaks) \u2014 Return Breaks that are within limits&lt;/&gt;</li> <li><code>get_breaks</code><code>(</code><code>limits</code><code>)</code> (ScaleDiscreteBreaks) \u2014 Return an ordered list of breaks&lt;/&gt;</li> <li><code>get_labels</code><code>(</code><code>breaks</code><code>)</code> (ScaleLabels) \u2014 Generate labels for the legend/guide breaks&lt;/&gt;</li> <li><code>inverse</code><code>(</code><code>x</code><code>)</code> \u2014 Inverse transform array|series x&lt;/&gt;</li> <li><code>is_empty</code><code>(</code><code>)</code> (bool) \u2014 Whether the scale has size information&lt;/&gt;</li> <li><code>map</code><code>(</code><code>x</code>, <code>limits</code><code>)</code> (Sequence[Any]) \u2014 Map values in x to a palette&lt;/&gt;</li> <li><code>map_df</code><code>(</code><code>df</code><code>)</code> (DataFrame) \u2014 Map df&lt;/&gt;</li> <li><code>palette</code><code>(</code><code>n</code><code>)</code> (Sequence[Any]) \u2014 Aesthetic mapping function&lt;/&gt;</li> <li><code>reset</code><code>(</code><code>)</code> \u2014 Set the range of the scale to None.&lt;/&gt;</li> <li><code>train</code><code>(</code><code>x</code>, <code>drop</code><code>)</code> \u2014 Train scale&lt;/&gt;</li> <li><code>train_df</code><code>(</code><code>df</code><code>)</code> \u2014 Train scale from a dataframe&lt;/&gt;</li> <li><code>transform</code><code>(</code><code>x</code><code>)</code> \u2014 Transform array|series x&lt;/&gt;</li> <li><code>transform_df</code><code>(</code><code>df</code><code>)</code> (DataFrame) \u2014 Transform dataframe&lt;/&gt;</li> <li><code>view</code><code>(</code><code>limits</code>, <code>range</code><code>)</code> (scale_view) \u2014 Information about the trained scale&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Add this scale to ggplot object</p> method &lt;/&gt; <p>Inverse transform array|series x</p> method &lt;/&gt; <p>Set the range of the scale to None.</p><p>i.e Forget all the training</p> method &lt;/&gt; <p>Whether the scale has size information</p> method &lt;/&gt; <p>Train scale from a dataframe</p> method &lt;/&gt; <p>Map df</p> staticmethod &lt;/&gt; <p>Aesthetic mapping function</p> method &lt;/&gt; <p>Train scale</p> Parameters <ul> <li><code>x</code> (pd.series | np.array) \u2014 a column of data to train over</li> <li><code>drop</code> (bool) \u2014 Whether to drop(not include) unused categories</li> </ul> method &lt;/&gt; <p>Get the phyical size of the scale</p><p>Unlike limits, this always returns a numeric vector of length 2</p> method &lt;/&gt; <p>Calculate the final range in coordinate space</p> method &lt;/&gt; <p>Information about the trained scale</p> method &lt;/&gt; <p>Get the default expansion for a discrete scale</p> method &lt;/&gt; <p>Map values in x to a palette</p> method &lt;/&gt; <p>Return an ordered list of breaks</p><p>The form is suitable for use by the guides e.g.     ['fair', 'good', 'very good', 'premium', 'ideal']</p> method &lt;/&gt; <p>Return Breaks that are within limits</p> method &lt;/&gt; <p>Generate labels for the legend/guide breaks</p> method &lt;/&gt; <p>Transform dataframe</p> method &lt;/&gt; <p>Transform array|series x</p>"},{"location":"api/plotnine_prism.scale/#plotnine_prismscale","title":"plotnine_prism.scale","text":""},{"location":"api/plotnine_prism.scale/#plotnine_prismscaleget_minor_breaks","title":"<code>plotnine_prism.scale.</code><code>get_minor_breaks</code><code>(</code><code>major</code>, <code>limits=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotnine_prismscaleget_labels","title":"<code>plotnine_prism.scale.</code><code>get_labels</code><code>(</code><code>breaks=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotnine_prismscalescale_color_prism","title":"<code>plotnine_prism.scale.</code><code>scale_color_prism</code><code>(</code><code>palette='colors'</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleradd","title":"<code>__radd__</code><code>(</code><code>gg</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleinverse","title":"<code>inverse</code><code>(</code><code>x</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescalereset","title":"<code>reset</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleis_empty","title":"<code>is_empty</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaletrain_df","title":"<code>train_df</code><code>(</code><code>df</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescalemap_df","title":"<code>map_df</code><code>(</code><code>df</code><code>)</code> \u2192 DataFrame","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretepalette","title":"<code>palette</code><code>(</code><code>n</code><code>)</code> \u2192 Sequence[Any]","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetrain","title":"<code>train</code><code>(</code><code>x</code>, <code>drop=False</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretedimension","title":"<code>dimension</code><code>(</code><code>expand=(0, 0, 0, 0)</code>, <code>limits=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteexpand_limits","title":"<code>expand_limits</code><code>(</code><code>limits</code>, <code>expand</code>, <code>coord_limits</code>, <code>trans</code><code>)</code> \u2192 range_view","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteview","title":"<code>view</code><code>(</code><code>limits=None</code>, <code>range=None</code><code>)</code> \u2192 scale_view","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretedefault_expansion","title":"<code>default_expansion</code><code>(</code><code>mult=0</code>, <code>add=0.6</code>, <code>expand=True</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretemap","title":"<code>map</code><code>(</code><code>x</code>, <code>limits=None</code><code>)</code> \u2192 Sequence[Any]","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_breaks","title":"<code>get_breaks</code><code>(</code><code>limits=None</code><code>)</code> \u2192 ScaleDiscreteBreaks","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_bounded_breaks","title":"<code>get_bounded_breaks</code><code>(</code><code>limits=None</code><code>)</code> \u2192 ScaleDiscreteBreaks","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_labels","title":"<code>get_labels</code><code>(</code><code>breaks=None</code><code>)</code> \u2192 ScaleLabels","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetransform_df","title":"<code>transform_df</code><code>(</code><code>df</code><code>)</code> \u2192 DataFrame","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetransform","title":"<code>transform</code><code>(</code><code>x</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotnine_prismscalescale_fill_prism","title":"<code>plotnine_prism.scale.</code><code>scale_fill_prism</code><code>(</code><code>palette='colors'</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleradd_1","title":"<code>__radd__</code><code>(</code><code>gg</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleinverse_1","title":"<code>inverse</code><code>(</code><code>x</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescalereset_1","title":"<code>reset</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleis_empty_1","title":"<code>is_empty</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaletrain_df_1","title":"<code>train_df</code><code>(</code><code>df</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescalemap_df_1","title":"<code>map_df</code><code>(</code><code>df</code><code>)</code> \u2192 DataFrame","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretepalette_1","title":"<code>palette</code><code>(</code><code>n</code><code>)</code> \u2192 Sequence[Any]","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetrain_1","title":"<code>train</code><code>(</code><code>x</code>, <code>drop=False</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretedimension_1","title":"<code>dimension</code><code>(</code><code>expand=(0, 0, 0, 0)</code>, <code>limits=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteexpand_limits_1","title":"<code>expand_limits</code><code>(</code><code>limits</code>, <code>expand</code>, <code>coord_limits</code>, <code>trans</code><code>)</code> \u2192 range_view","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteview_1","title":"<code>view</code><code>(</code><code>limits=None</code>, <code>range=None</code><code>)</code> \u2192 scale_view","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretedefault_expansion_1","title":"<code>default_expansion</code><code>(</code><code>mult=0</code>, <code>add=0.6</code>, <code>expand=True</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretemap_1","title":"<code>map</code><code>(</code><code>x</code>, <code>limits=None</code><code>)</code> \u2192 Sequence[Any]","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_breaks_1","title":"<code>get_breaks</code><code>(</code><code>limits=None</code><code>)</code> \u2192 ScaleDiscreteBreaks","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_bounded_breaks_1","title":"<code>get_bounded_breaks</code><code>(</code><code>limits=None</code><code>)</code> \u2192 ScaleDiscreteBreaks","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_labels_1","title":"<code>get_labels</code><code>(</code><code>breaks=None</code><code>)</code> \u2192 ScaleLabels","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetransform_df_1","title":"<code>transform_df</code><code>(</code><code>df</code><code>)</code> \u2192 DataFrame","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetransform_1","title":"<code>transform</code><code>(</code><code>x</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotnine_prismscalescale_shape_prism","title":"<code>plotnine_prism.scale.</code><code>scale_shape_prism</code><code>(</code><code>palette='default'</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleradd_2","title":"<code>__radd__</code><code>(</code><code>gg</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleinverse_2","title":"<code>inverse</code><code>(</code><code>x</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescalereset_2","title":"<code>reset</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaleis_empty_2","title":"<code>is_empty</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescaletrain_df_2","title":"<code>train_df</code><code>(</code><code>df</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescalemap_df_2","title":"<code>map_df</code><code>(</code><code>df</code><code>)</code> \u2192 DataFrame","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretepalette_2","title":"<code>palette</code><code>(</code><code>n</code><code>)</code> \u2192 Sequence[Any]","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetrain_2","title":"<code>train</code><code>(</code><code>x</code>, <code>drop=False</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretedimension_2","title":"<code>dimension</code><code>(</code><code>expand=(0, 0, 0, 0)</code>, <code>limits=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteexpand_limits_2","title":"<code>expand_limits</code><code>(</code><code>limits</code>, <code>expand</code>, <code>coord_limits</code>, <code>trans</code><code>)</code> \u2192 range_view","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteview_2","title":"<code>view</code><code>(</code><code>limits=None</code>, <code>range=None</code><code>)</code> \u2192 scale_view","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretedefault_expansion_2","title":"<code>default_expansion</code><code>(</code><code>mult=0</code>, <code>add=0.6</code>, <code>expand=True</code><code>)</code>","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretemap_2","title":"<code>map</code><code>(</code><code>x</code>, <code>limits=None</code><code>)</code> \u2192 Sequence[Any]","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_breaks_2","title":"<code>get_breaks</code><code>(</code><code>limits=None</code><code>)</code> \u2192 ScaleDiscreteBreaks","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_bounded_breaks_2","title":"<code>get_bounded_breaks</code><code>(</code><code>limits=None</code><code>)</code> \u2192 ScaleDiscreteBreaks","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discreteget_labels_2","title":"<code>get_labels</code><code>(</code><code>breaks=None</code><code>)</code> \u2192 ScaleLabels","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetransform_df_2","title":"<code>transform_df</code><code>(</code><code>df</code><code>)</code> \u2192 DataFrame","text":""},{"location":"api/plotnine_prism.scale/#plotninescalesscalescale_discretetransform_2","title":"<code>transform</code><code>(</code><code>x</code><code>)</code>","text":""},{"location":"api/plotnine_prism.theme/","title":"plotnine_prism.theme","text":"module &lt;/&gt; <p>Provides theme_prism</p> Classes <ul> <li><code>theme_prism</code> \u2014 The theme_prism() class&lt;/&gt;</li> </ul> class &lt;/&gt; Bases plotnine.themes.theme.theme <p>The theme_prism() class</p> Parameters <ul> <li><code>palette</code> (optional) \u2014 The theme palette</li> <li><code>base_size</code> (optional) \u2014 The base size of the plot</li> <li><code>base_family</code> (optional) \u2014 The base font family</li> <li><code>base_fontface</code> (optional) \u2014 The base font face</li> <li><code>base_line_size</code> (optional) \u2014 The base line size</li> <li><code>base_rect_size</code> (optional) \u2014 The base rect size</li> <li><code>axis_text_angle</code> (optional) \u2014 The default axis text angle</li> <li><code>border</code> (optional) \u2014 Whether to show border of the plot</li> <li><code>**kwargs</code> \u2014 Other theming options</li> </ul> Attributes <ul> <li><code>rcParams</code> \u2014 Return rcParams dict for this theme. <p>Notes Subclasses should not need to override this method method as long as self._rcParams is constructed properly. rcParams are used during plotting. Sometimes the same theme can be achieved by setting rcParams before plotting or a apply after plotting. The choice of how to implement it is is a matter of convenience in that case. There are certain things can only be themed after plotting. There may not be an rcParam to control the theme or the act of plotting may cause an entity to come into existence before it can be themed. &lt;/&gt; Methods <ul> <li><code>__add__</code><code>(</code><code>other</code><code>)</code> (theme) \u2014 Add other theme to this theme&lt;/&gt;</li> <li><code>__deepcopy__</code><code>(</code><code>memo</code><code>)</code> (theme) \u2014 Deep copy without copying the figure&lt;/&gt;</li> <li><code>__eq__</code><code>(</code><code>other</code><code>)</code> (bool) \u2014 Test if themes are equal&lt;/&gt;</li> <li><code>__iadd__</code><code>(</code><code>other</code><code>)</code> (theme) \u2014 Add theme to theme&lt;/&gt;</li> <li><code>__radd__</code><code>(</code><code>other</code><code>)</code> (theme | Ggplot) \u2014 Add theme to ggplot object or to another theme&lt;/&gt;</li> <li><code>add_theme</code><code>(</code><code>other</code><code>)</code> (theme) \u2014 Add themes together&lt;/&gt;</li> <li><code>apply</code><code>(</code><code>)</code> \u2014 Apply this theme, then apply additional modifications in order.&lt;/&gt;</li> <li><code>setup</code><code>(</code><code>)</code> \u2014 Setup theme &amp; figure for before drawing&lt;/&gt;</li> </ul> method &lt;/&gt; <p>Test if themes are equal</p><p>Mostly for testing purposes</p> method &lt;/&gt; <p>Apply this theme, then apply additional modifications in order.</p><p>This method will be called once after plot has completed. Subclasses that override this method should make sure that the base class method is called.</p> method &lt;/&gt; <p>Setup theme &amp; figure for before drawing</p><ol> <li>The figure is modified with to the theme settings    that it are required before drawing.</li> <li>Give contained objects of the theme/themeables a    reference to the theme.</li> </ol> <p>This method will be called once with a figure object before any plotting has completed. Subclasses that override this method should make sure that the base class method is called.</p> method &lt;/&gt; <p>Add themes together</p><p>Subclasses should not override this method.</p> <p>This will be called when adding two instances of class 'theme' together. A complete theme will annihilate any previous themes. Partial themes can be added together and can be added to a complete theme.</p> method &lt;/&gt; <p>Add other theme to this theme</p> method &lt;/&gt; <p>Add theme to ggplot object or to another theme</p><p>This will be called in one of two ways::</p> <pre><code> ggplot() + theme()\n theme1() + theme2()\n</code></pre> <p>In both cases, <code>self</code> is the :class:<code>theme</code> on the right hand side.</p> <p>Subclasses should not override this method.</p> method &lt;/&gt; <p>Add theme to theme</p> method &lt;/&gt; <p>Deep copy without copying the figure</p>"},{"location":"api/plotnine_prism.theme/#plotnine_prismtheme","title":"plotnine_prism.theme","text":""},{"location":"api/plotnine_prism.theme/#plotnine_prismthemetheme_prism","title":"<code>plotnine_prism.theme.</code><code>theme_prism</code><code>(</code><code>palette='black_and_white'</code>, <code>base_size=10.0</code>, <code>base_family='DejaVu Sans'</code>, <code>base_fontface='bold'</code>, <code>base_line_size=None</code>, <code>base_rect_size=None</code>, <code>axis_text_angle=0</code>, <code>border=False</code>, <code>**kwargs</code><code>)</code>","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemeeq","title":"<code>__eq__</code><code>(</code><code>other</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemeapply","title":"<code>apply</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemesetup","title":"<code>setup</code><code>(</code><code>)</code>","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemeadd_theme","title":"<code>add_theme</code><code>(</code><code>other</code><code>)</code> \u2192 theme","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemeadd","title":"<code>__add__</code><code>(</code><code>other</code><code>)</code> \u2192 theme","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemeradd","title":"<code>__radd__</code><code>(</code><code>other</code><code>)</code> \u2192 theme | Ggplot","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemeiadd","title":"<code>__iadd__</code><code>(</code><code>other</code><code>)</code> \u2192 theme","text":""},{"location":"api/plotnine_prism.theme/#plotninethemesthemethemedeepcopy","title":"<code>__deepcopy__</code><code>(</code><code>memo</code><code>)</code> \u2192 theme","text":""},{"location":"api/plotnine_prism.themeable/","title":"plotnine_prism.themeable","text":"module &lt;/&gt; <p>Add themeables for theme_prism</p> Classes <ul> <li><code>axis_ticks_x</code> \u2014 Themeable for ticks on x axis that is missing in plotnine&lt;/&gt;</li> <li><code>axis_ticks_y</code> \u2014 Themeable for ticks on y axis that is missing in plotnine&lt;/&gt;</li> <li><code>prism_ticks_length_x</code> \u2014 Themeable for ticks length on x axis&lt;/&gt;</li> <li><code>prism_ticks_length_y</code> \u2014 Themeable for ticks length on y axis&lt;/&gt;</li> <li><code>prism_ticks_length</code> \u2014 Themeable for ticks length&lt;/&gt;</li> </ul> class &lt;/&gt; Bases plotnine.themes.themeable.axis_ticks_major_x plotnine.themes.themeable.axis_ticks_minor_x plotnine.themes.themeable.themeable <p>Themeable for ticks on x axis that is missing in plotnine</p> Attributes <ul> <li><code>rcParams</code> \u2014 Return themeables rcparams to an rcparam dict before plotting.&lt;/&gt;</li> </ul> Methods <ul> <li><code>__eq__</code><code>(</code><code>other</code><code>)</code> (bool) \u2014 Mostly for unittesting.&lt;/&gt;</li> <li><code>apply</code><code>(</code><code>theme</code><code>)</code> \u2014 Called by the theme to apply the themeable&lt;/&gt;</li> <li><code>apply_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 Apply themeable to the axis&lt;/&gt;</li> <li><code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> <li><code>blank_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 When it's set blank&lt;/&gt;</li> <li><code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Blank out elements on the figure&lt;/&gt;</li> <li><code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code> (out : Themeable) \u2014 Create an themeable by name&lt;/&gt;</li> <li><code>is_blank</code><code>(</code><code>)</code> (bool) \u2014 Return True if theme_element is made of element_blank&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Merge properties of other into self&lt;/&gt;</li> <li><code>setup_figure</code><code>(</code><code>figure</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> </ul> staticmethod &lt;/&gt; <p>Create an themeable by name</p> Parameters <ul> <li><code>name</code> (str) \u2014 Class name</li> <li><code>theme_element</code> (element object) \u2014 A of the type required by the themeFor lines, text and rects it should be one of: :class:<code>element_line</code>, :class:<code>element_rect</code>, :class:<code>element_text</code> or :class:<code>element_blank</code> </li> </ul> method &lt;/&gt; <p>Return True if theme_element is made of element_blank</p> method &lt;/&gt; <p>Merge properties of other into self</p> Raises <ul> <li><code>ValueError</code> \u2014 If any of the properties are blank</li> </ul> method &lt;/&gt; <p>Mostly for unittesting.</p> method &lt;/&gt; <p>Called by the theme to apply the themeable</p><p>Subclasses shouldn't have to override this method to customize.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>setup_figure</code>, this method is called after plotting and all the elements are drawn onto the figure.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>apply_figure</code>, this method is called before any plotting is done. This is necessary in some cases where the drawing functions need(or can make use of) this information.</p> method &lt;/&gt; <p>Blank out elements on the figure</p> method &lt;/&gt; <p>Apply themeable to the axis</p> method &lt;/&gt; <p>When it's set blank</p> class &lt;/&gt; Bases plotnine.themes.themeable.axis_ticks_major_y plotnine.themes.themeable.axis_ticks_minor_y plotnine.themes.themeable.themeable <p>Themeable for ticks on y axis that is missing in plotnine</p> Attributes <ul> <li><code>rcParams</code> \u2014 Return themeables rcparams to an rcparam dict before plotting.&lt;/&gt;</li> </ul> Methods <ul> <li><code>__eq__</code><code>(</code><code>other</code><code>)</code> (bool) \u2014 Mostly for unittesting.&lt;/&gt;</li> <li><code>apply</code><code>(</code><code>theme</code><code>)</code> \u2014 Called by the theme to apply the themeable&lt;/&gt;</li> <li><code>apply_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 Apply themeable to the axis&lt;/&gt;</li> <li><code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> <li><code>blank_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 When it's set blank&lt;/&gt;</li> <li><code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Blank out elements on the figure&lt;/&gt;</li> <li><code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code> (out : Themeable) \u2014 Create an themeable by name&lt;/&gt;</li> <li><code>is_blank</code><code>(</code><code>)</code> (bool) \u2014 Return True if theme_element is made of element_blank&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Merge properties of other into self&lt;/&gt;</li> <li><code>setup_figure</code><code>(</code><code>figure</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> </ul> staticmethod &lt;/&gt; <p>Create an themeable by name</p> Parameters <ul> <li><code>name</code> (str) \u2014 Class name</li> <li><code>theme_element</code> (element object) \u2014 A of the type required by the themeFor lines, text and rects it should be one of: :class:<code>element_line</code>, :class:<code>element_rect</code>, :class:<code>element_text</code> or :class:<code>element_blank</code> </li> </ul> method &lt;/&gt; <p>Return True if theme_element is made of element_blank</p> method &lt;/&gt; <p>Merge properties of other into self</p> Raises <ul> <li><code>ValueError</code> \u2014 If any of the properties are blank</li> </ul> method &lt;/&gt; <p>Mostly for unittesting.</p> method &lt;/&gt; <p>Called by the theme to apply the themeable</p><p>Subclasses shouldn't have to override this method to customize.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>setup_figure</code>, this method is called after plotting and all the elements are drawn onto the figure.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>apply_figure</code>, this method is called before any plotting is done. This is necessary in some cases where the drawing functions need(or can make use of) this information.</p> method &lt;/&gt; <p>Blank out elements on the figure</p> method &lt;/&gt; <p>Apply themeable to the axis</p> method &lt;/&gt; <p>When it's set blank</p> class &lt;/&gt; Bases plotnine.themes.themeable.themeable <p>Themeable for ticks length on x axis</p> Attributes <ul> <li><code>rcParams</code> \u2014 Return themeables rcparams to an rcparam dict before plotting.&lt;/&gt;</li> </ul> Methods <ul> <li><code>__eq__</code><code>(</code><code>other</code><code>)</code> (bool) \u2014 Mostly for unittesting.&lt;/&gt;</li> <li><code>apply</code><code>(</code><code>theme</code><code>)</code> \u2014 Called by the theme to apply the themeable&lt;/&gt;</li> <li><code>apply_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 Apply themeable to the axis&lt;/&gt;</li> <li><code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> <li><code>blank_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 When it's set blank&lt;/&gt;</li> <li><code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Blank out elements on the figure&lt;/&gt;</li> <li><code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code> (out : Themeable) \u2014 Create an themeable by name&lt;/&gt;</li> <li><code>is_blank</code><code>(</code><code>)</code> (bool) \u2014 Return True if theme_element is made of element_blank&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Merge properties of other into self&lt;/&gt;</li> <li><code>setup_figure</code><code>(</code><code>figure</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> </ul> staticmethod &lt;/&gt; <p>Create an themeable by name</p> Parameters <ul> <li><code>name</code> (str) \u2014 Class name</li> <li><code>theme_element</code> (element object) \u2014 A of the type required by the themeFor lines, text and rects it should be one of: :class:<code>element_line</code>, :class:<code>element_rect</code>, :class:<code>element_text</code> or :class:<code>element_blank</code> </li> </ul> method &lt;/&gt; <p>Return True if theme_element is made of element_blank</p> method &lt;/&gt; <p>Merge properties of other into self</p> Raises <ul> <li><code>ValueError</code> \u2014 If any of the properties are blank</li> </ul> method &lt;/&gt; <p>Mostly for unittesting.</p> method &lt;/&gt; <p>Called by the theme to apply the themeable</p><p>Subclasses shouldn't have to override this method to customize.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>setup_figure</code>, this method is called after plotting and all the elements are drawn onto the figure.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>apply_figure</code>, this method is called before any plotting is done. This is necessary in some cases where the drawing functions need(or can make use of) this information.</p> method &lt;/&gt; <p>Blank out elements on the figure</p> method &lt;/&gt; <p>Apply themeable to the axis</p> method &lt;/&gt; <p>When it's set blank</p> class &lt;/&gt; Bases plotnine.themes.themeable.themeable <p>Themeable for ticks length on y axis</p> Attributes <ul> <li><code>rcParams</code> \u2014 Return themeables rcparams to an rcparam dict before plotting.&lt;/&gt;</li> </ul> Methods <ul> <li><code>__eq__</code><code>(</code><code>other</code><code>)</code> (bool) \u2014 Mostly for unittesting.&lt;/&gt;</li> <li><code>apply</code><code>(</code><code>theme</code><code>)</code> \u2014 Called by the theme to apply the themeable&lt;/&gt;</li> <li><code>apply_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 Apply themeable to the axis&lt;/&gt;</li> <li><code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> <li><code>blank_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 When it's set blank&lt;/&gt;</li> <li><code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Blank out elements on the figure&lt;/&gt;</li> <li><code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code> (out : Themeable) \u2014 Create an themeable by name&lt;/&gt;</li> <li><code>is_blank</code><code>(</code><code>)</code> (bool) \u2014 Return True if theme_element is made of element_blank&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Merge properties of other into self&lt;/&gt;</li> <li><code>setup_figure</code><code>(</code><code>figure</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> </ul> staticmethod &lt;/&gt; <p>Create an themeable by name</p> Parameters <ul> <li><code>name</code> (str) \u2014 Class name</li> <li><code>theme_element</code> (element object) \u2014 A of the type required by the themeFor lines, text and rects it should be one of: :class:<code>element_line</code>, :class:<code>element_rect</code>, :class:<code>element_text</code> or :class:<code>element_blank</code> </li> </ul> method &lt;/&gt; <p>Return True if theme_element is made of element_blank</p> method &lt;/&gt; <p>Merge properties of other into self</p> Raises <ul> <li><code>ValueError</code> \u2014 If any of the properties are blank</li> </ul> method &lt;/&gt; <p>Mostly for unittesting.</p> method &lt;/&gt; <p>Called by the theme to apply the themeable</p><p>Subclasses shouldn't have to override this method to customize.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>setup_figure</code>, this method is called after plotting and all the elements are drawn onto the figure.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>apply_figure</code>, this method is called before any plotting is done. This is necessary in some cases where the drawing functions need(or can make use of) this information.</p> method &lt;/&gt; <p>Blank out elements on the figure</p> method &lt;/&gt; <p>Apply themeable to the axis</p> method &lt;/&gt; <p>When it's set blank</p> class &lt;/&gt; Bases plotnine_prism.themeable.prism_ticks_length_x plotnine_prism.themeable.prism_ticks_length_y plotnine.themes.themeable.themeable <p>Themeable for ticks length</p> Attributes <ul> <li><code>rcParams</code> \u2014 Return themeables rcparams to an rcparam dict before plotting.&lt;/&gt;</li> </ul> Methods <ul> <li><code>__eq__</code><code>(</code><code>other</code><code>)</code> (bool) \u2014 Mostly for unittesting.&lt;/&gt;</li> <li><code>apply</code><code>(</code><code>theme</code><code>)</code> \u2014 Called by the theme to apply the themeable&lt;/&gt;</li> <li><code>apply_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 Apply themeable to the axis&lt;/&gt;</li> <li><code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> <li><code>blank_ax</code><code>(</code><code>ax</code><code>)</code> \u2014 When it's set blank&lt;/&gt;</li> <li><code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code> \u2014 Blank out elements on the figure&lt;/&gt;</li> <li><code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code> (out : Themeable) \u2014 Create an themeable by name&lt;/&gt;</li> <li><code>is_blank</code><code>(</code><code>)</code> (bool) \u2014 Return True if theme_element is made of element_blank&lt;/&gt;</li> <li><code>merge</code><code>(</code><code>other</code><code>)</code> \u2014 Merge properties of other into self&lt;/&gt;</li> <li><code>setup_figure</code><code>(</code><code>figure</code><code>)</code> \u2014 Apply theme to the figure&lt;/&gt;</li> </ul> staticmethod &lt;/&gt; <p>Create an themeable by name</p> Parameters <ul> <li><code>name</code> (str) \u2014 Class name</li> <li><code>theme_element</code> (element object) \u2014 A of the type required by the themeFor lines, text and rects it should be one of: :class:<code>element_line</code>, :class:<code>element_rect</code>, :class:<code>element_text</code> or :class:<code>element_blank</code> </li> </ul> method &lt;/&gt; <p>Return True if theme_element is made of element_blank</p> method &lt;/&gt; <p>Merge properties of other into self</p> Raises <ul> <li><code>ValueError</code> \u2014 If any of the properties are blank</li> </ul> method &lt;/&gt; <p>Mostly for unittesting.</p> method &lt;/&gt; <p>Called by the theme to apply the themeable</p><p>Subclasses shouldn't have to override this method to customize.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>setup_figure</code>, this method is called after plotting and all the elements are drawn onto the figure.</p> method &lt;/&gt; <p>Apply theme to the figure</p><p>Compared to :meth:<code>apply_figure</code>, this method is called before any plotting is done. This is necessary in some cases where the drawing functions need(or can make use of) this information.</p> method &lt;/&gt; <p>Blank out elements on the figure</p> method &lt;/&gt; <p>Apply themeable to the axis</p> method &lt;/&gt; <p>When it's set blank</p>"},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeable","title":"plotnine_prism.themeable","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableaxis_ticks_x","title":"<code>plotnine_prism.themeable.</code><code>axis_ticks_x</code><code>(</code><code>theme_element=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablefrom_class_name","title":"<code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableis_blank","title":"<code>is_blank</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablemerge","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableeq","title":"<code>__eq__</code><code>(</code><code>other</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply","title":"<code>apply</code><code>(</code><code>theme</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_figure","title":"<code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablesetup_figure","title":"<code>setup_figure</code><code>(</code><code>figure</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableblank_figure","title":"<code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableaxis_ticks_xapply_ax","title":"<code>apply_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableaxis_ticks_xblank_ax","title":"<code>blank_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableaxis_ticks_y","title":"<code>plotnine_prism.themeable.</code><code>axis_ticks_y</code><code>(</code><code>theme_element=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablefrom_class_name_1","title":"<code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableis_blank_1","title":"<code>is_blank</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablemerge_1","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableeq_1","title":"<code>__eq__</code><code>(</code><code>other</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_1","title":"<code>apply</code><code>(</code><code>theme</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_figure_1","title":"<code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablesetup_figure_1","title":"<code>setup_figure</code><code>(</code><code>figure</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableblank_figure_1","title":"<code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableaxis_ticks_yapply_ax","title":"<code>apply_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableaxis_ticks_yblank_ax","title":"<code>blank_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_length_x","title":"<code>plotnine_prism.themeable.</code><code>prism_ticks_length_x</code><code>(</code><code>theme_element=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablefrom_class_name_2","title":"<code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableis_blank_2","title":"<code>is_blank</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablemerge_2","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableeq_2","title":"<code>__eq__</code><code>(</code><code>other</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_2","title":"<code>apply</code><code>(</code><code>theme</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_figure_2","title":"<code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablesetup_figure_2","title":"<code>setup_figure</code><code>(</code><code>figure</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableblank_figure_2","title":"<code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_length_xapply_ax","title":"<code>apply_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_length_xblank_ax","title":"<code>blank_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_length_y","title":"<code>plotnine_prism.themeable.</code><code>prism_ticks_length_y</code><code>(</code><code>theme_element=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablefrom_class_name_3","title":"<code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableis_blank_3","title":"<code>is_blank</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablemerge_3","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableeq_3","title":"<code>__eq__</code><code>(</code><code>other</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_3","title":"<code>apply</code><code>(</code><code>theme</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_figure_3","title":"<code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablesetup_figure_3","title":"<code>setup_figure</code><code>(</code><code>figure</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableblank_figure_3","title":"<code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_length_yapply_ax","title":"<code>apply_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_length_yblank_ax","title":"<code>blank_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_length","title":"<code>plotnine_prism.themeable.</code><code>prism_ticks_length</code><code>(</code><code>theme_element=None</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablefrom_class_name_4","title":"<code>from_class_name</code><code>(</code><code>name</code>, <code>theme_element</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableis_blank_4","title":"<code>is_blank</code><code>(</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablemerge_4","title":"<code>merge</code><code>(</code><code>other</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableeq_4","title":"<code>__eq__</code><code>(</code><code>other</code><code>)</code> \u2192 bool","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_4","title":"<code>apply</code><code>(</code><code>theme</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableapply_figure_4","title":"<code>apply_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeablesetup_figure_4","title":"<code>setup_figure</code><code>(</code><code>figure</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotninethemesthemeablethemeableblank_figure_4","title":"<code>blank_figure</code><code>(</code><code>figure</code>, <code>targets</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_lengthapply_ax","title":"<code>apply_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/plotnine_prism.themeable/#plotnine_prismthemeableprism_ticks_lengthblank_ax","title":"<code>blank_ax</code><code>(</code><code>ax</code><code>)</code>","text":""},{"location":"api/source/plotnine_prism.guide/","title":"plotnine_prism.guide","text":""},{"location":"api/source/plotnine_prism.guide/","title":"SOURCE CODE plotnine_prism.guide DOCS","text":"<pre><code>\"\"\"Provides guides\"\"\"\nimport hashlib\nfrom warnings import warn\n\nfrom matplotlib.ticker import NullLocator\n\nfrom plotnine.guides.guide import guide\nfrom plotnine.exceptions import PlotnineWarning\n\n\nclass guide_prism_offset(guide):DOCS\n    \"\"\"The prism offset guide that offset the axes\"\"\"\n\n    offset = 20\n    aesthetic = None\n    hash = None\n    available_aes = {\"x\", \"y\"}\n\n    def train(self, scale, aesthetic=None):DOCS\n        \"\"\"Get arguments from the scale\"\"\"\n        if aesthetic is None:\n            aesthetic = scale.aesthetics[0]\n\n        # Do nothing if scales are inappropriate\n        if set(scale.aesthetics) &amp; self.available_aes == 0:\n            warn(\n                f\"'{self.__class__.__name__}' needs appropriate scales.\",\n                PlotnineWarning,\n            )\n            return None\n\n        self.aesthetic = list(set(scale.aesthetics) &amp; self.available_aes)[0]\n\n        info = \"\\n\".join([self.title, self.__class__.__name__])\n        self.hash = hashlib.md5(info.encode(\"utf-8\")).hexdigest()\n        return self\n\n    def create_geoms(self, plot):DOCS\n        \"\"\"Apply the arguments\"\"\"\n        xaxis_position = plot.axs[0].xaxis.get_label_position()\n        yaxis_position = plot.axs[0].yaxis.get_label_position()\n        gca = plot.axs[0].axes\n\n        if self.aesthetic == \"x\":\n            major_locs = gca.get_xticks()\n            minor_locs = gca.get_xticks(minor=True)\n            if yaxis_position == \"left\":\n                offset = (\n                    self.offset\n                    if major_locs[0] &gt; minor_locs[0]\n                    else self.offset / 2\n                )\n            else:\n                offset = (\n                    self.offset\n                    if major_locs[-1] &lt; minor_locs[-1]\n                    else self.offset / 2\n                )\n            gca.spines[yaxis_position].set_position((\"outward\", offset))\n            gca.set_xlim(min(major_locs), max(major_locs))\n            gca.xaxis.set_minor_locator(NullLocator())\n        else:\n            major_locs = gca.get_yticks()\n            minor_locs = gca.get_yticks(minor=True)\n            if xaxis_position == \"bottom\":\n                offset = (\n                    self.offset\n                    if len(minor_locs) &gt; 0 and major_locs[0] &gt; minor_locs[0]\n                    else self.offset / 2\n                )\n            else:\n                offset = (\n                    self.offset\n                    if len(minor_locs) &gt; 0 and major_locs[-1] &lt; minor_locs[-1]\n                    else self.offset / 2\n                )\n\n            gca.spines[xaxis_position].set_position((\"outward\", offset))\n            gca.set_ylim(min(major_locs), max(major_locs))\n            gca.yaxis.set_minor_locator(NullLocator())\n\n    def merge(self, other):DOCS\n        \"\"\"Simply discards the other guide\"\"\"\n        return self\n\n    def draw(self):DOCS\n        \"\"\"Nothing to do\"\"\"\n\n\nclass guide_prism(guide_prism_offset):DOCS\n    \"\"\"The prism offset guide that hides the minor ticks\"\"\"\n\n    available_aes = {\"x\", \"y\"}\n\n    def create_geoms(self, plot):DOCS\n        \"\"\"Apply the arguments\"\"\"\n        gca = plot.axs[0].axes\n        if self.aesthetic == \"x\":\n            gca.xaxis.set_minor_locator(NullLocator())\n        else:\n            gca.yaxis.set_minor_locator(NullLocator())\n\n\nclass guide_prism_minor(guide_prism_offset):DOCS\n    \"\"\"The prism offset guide that shows the minor ticks\"\"\"\n\n    available_aes = {\"x\", \"y\"}\n\n    def create_geoms(self, plot):DOCS\n        \"\"\"Apply the arguments\"\"\"\n\n\nclass guide_prism_offset_minor(guide_prism_offset):DOCS\n    \"\"\"The prism offset guide that shows the minor ticks with offset\"\"\"\n\n    def create_geoms(self, plot):DOCS\n        \"\"\"Apply the arguments\"\"\"\n        xaxis_position = plot.axs[0].xaxis.get_label_position()\n        yaxis_position = plot.axs[0].yaxis.get_label_position()\n        gca = plot.axs[0].axes\n\n        if self.aesthetic == \"x\":\n            gca.spines[yaxis_position].set_position((\"outward\", self.offset))\n            major_locs = gca.get_xticks()\n            minor_locs = gca.xaxis.get_minorticklocs()\n            min_loc = min(min(major_locs), min(minor_locs))\n            max_loc = max(max(major_locs), max(minor_locs))\n            gca.set_xlim(min_loc, max_loc)\n        else:\n            gca.spines[xaxis_position].set_position((\"outward\", self.offset))\n            major_locs = gca.get_yticks()\n            minor_locs = gca.yaxis.get_minorticklocs()\n            min_loc = min(min(major_locs), min(minor_locs))\n            max_loc = max(max(major_locs), max(minor_locs))\n            gca.set_ylim(min_loc, max_loc)\n\n\n# class AxesBracketDecorator:\n#     def __init__(self, ax, ticks, size=\"5%\", pad=0.05, spacing=0.05):\n\n#         divider = make_axes_locatable(ax)\n#         self.ax = divider.new_vertical(\n#             size=size,\n#             pad=pad,\n#             sharex=ax,\n#             pack_start=True,\n#         )\n#         ax.figure.add_axes(self.ax)\n#         ax.xaxis.set_visible(False)\n#         # ax.xaxis.spines['bottom'].set_visible(False)\n#         # self.ax.tick_params(axis='x', which=u'both', length=0)\n#         for direction in [\"left\", \"right\", \"bottom\", \"top\"]:\n#             self.ax.spines[direction].set_visible(False)\n#         self.ax.set_yticks([])\n#         pos = self.ax.get_position()\n\n#         self.dist = numpy.mean(numpy.diff(ticks))\n#         self.spacing = spacing\n#         # self.curve = self.get_curve()\n#         for tick in ticks:\n#             # self.plot_curve(tick)\n#             pass\n\n\n# class guide_prism_bracket(guide_prism_offset):\n\n#     def create_geoms(self, plot):\n#         gca = plot.axs[0].axes\n#         if self.aesthetic == \"x\":\n#             AxesBracketDecorator(gca, ticks=gca.get_xticks())\n#         else:\n#             AxesBracketDecorator(gca, ticks=gca.get_yticks())\n</code></pre>"},{"location":"api/source/plotnine_prism/","title":"plotnine_prism","text":""},{"location":"api/source/plotnine_prism/","title":"SOURCE CODE plotnine_prism DOCS","text":"<pre><code>\"\"\"Prism themes for plotnine, inspired by ggprism\"\"\"\n\nfrom .theme import theme_prism\nfrom .scale import (\n    scale_color_prism,\n    scale_fill_prism,\n    scale_shape_prism,\n    scale_colour_prism,\n)\nfrom .pal import (\n    list_themes,\n    list_color_pals,\n    list_colour_pals,\n    list_fill_pals,\n    list_shape_pals,\n    prism_color_pal,\n    prism_colour_pal,\n    prism_fill_pal,\n    prism_shape_pal,\n)\nfrom .guide import (\n    guide_prism,\n    guide_prism_minor,\n    # guide_prism_bracket,\n    guide_prism_offset,\n    guide_prism_offset_minor,\n)\n\n__all__ = (\n    \"theme_prism\",\n    \"scale_color_prism\",\n    \"scale_colour_prism\",\n    \"scale_fill_prism\",\n    \"scale_shape_prism\",\n    \"list_themes\",\n    \"list_color_pals\",\n    \"list_colour_pals\",\n    \"list_fill_pals\",\n    \"list_shape_pals\",\n    \"prism_color_pal\",\n    \"prism_colour_pal\",\n    \"prism_fill_pal\",\n    \"prism_shape_pal\",\n    \"guide_prism\",\n    \"guide_prism_minor\",\n    # \"guide_prism_bracket\",\n    \"guide_prism_offset\",\n    \"guide_prism_offset_minor\",\n)\n\n__version__ = \"0.3.3\"\n</code></pre>"},{"location":"api/source/plotnine_prism.pal/","title":"plotnine_prism.pal","text":""},{"location":"api/source/plotnine_prism.pal/","title":"SOURCE CODE plotnine_prism.pal DOCS","text":"<pre><code>\"\"\"Provides available palettes\"\"\"\n\nfrom functools import lru_cache\nfrom pathlib import Path\n\nimport rtoml\nfrom diot import Diot\n\nSCHEMES_DIR = Path(__file__).parent.joinpath(\"schemes\")\n\n\n@lru_cache()DOCS\ndef list_themes():\n    \"\"\"List all available theme palettes\"\"\"\n    return [\n        tfile.stem\n        for tfile in SCHEMES_DIR.glob(\"*.toml\")\n        if not tfile.stem.startswith(\"_\")\n    ]\n\n\n@lru_cache()\ndef _all_color_pals():\n    with SCHEMES_DIR.joinpath(\"_color_palettes.toml\").open() as fcolor:\n        return rtoml.load(fcolor)\n\n\n@lru_cache()\ndef _all_fill_pals():\n    with SCHEMES_DIR.joinpath(\"_fill_palettes.toml\").open() as ffill:\n        return rtoml.load(ffill)\n\n\n@lru_cache()\ndef _all_shape_pals():\n    with SCHEMES_DIR.joinpath(\"_shape_palettes.toml\").open() as fshape:\n        return rtoml.load(fshape)\n\n\n@lru_cache()DOCS\ndef theme_colors(palette):\n    \"\"\"Get the colors for a specific theme\"\"\"\n    with SCHEMES_DIR.joinpath(f\"{palette}.toml\").open() as fsch:\n        return Diot(rtoml.load(fsch))\n\n\ndef list_color_pals():DOCS\n    \"\"\"List all available color palettes\"\"\"\n    return list(_all_color_pals())\n\n\ndef list_fill_pals():DOCS\n    \"\"\"List all available fill palettes\"\"\"\n    return list(_all_fill_pals())\n\n\ndef list_shape_pals():DOCS\n    \"\"\"List all available shape palettes\"\"\"\n    return list(_all_shape_pals())\n\n\ndef prism_color_pal(palette):DOCS\n    \"\"\"Get the prism color palette by name\"\"\"\n    return lambda n: _all_color_pals()[palette][:n]\n\n\ndef prism_fill_pal(palette):DOCS\n    \"\"\"Get the prism fill palette by name\"\"\"\n    return lambda n: _all_fill_pals()[palette][:n]\n\n\ndef prism_shape_pal(palette):DOCS\n    \"\"\"Get the prism shape palette by name\"\"\"\n    return lambda n: _all_shape_pals()[palette][:n]\n\n\nlist_colour_pals = list_color_pals\nprism_colour_pal = prism_color_pal\n</code></pre>"},{"location":"api/source/plotnine_prism.scale/","title":"plotnine_prism.scale","text":""},{"location":"api/source/plotnine_prism.scale/","title":"SOURCE CODE plotnine_prism.scale DOCS","text":"<pre><code>\"\"\"Provides scales\"\"\"\n\nfrom plotnine.exceptions import PlotnineError\nfrom plotnine.scales.scale import scale_discrete, scale_continuous\nfrom .pal import prism_color_pal, prism_fill_pal, prism_shape_pal\n\n\ndef get_minor_breaks(DOCS\n    self,\n    major,\n    limits=None,\n):\n    \"\"\"\n    Return minor breaks\n\n    See https://github.com/has2k1/plotnine/issues/696\n    \"\"\"\n    if limits is None:\n        limits = self.limits\n\n    if self.minor_breaks is True:\n        # TODO: Remove ignore when mizani is static typed\n        minor_breaks = self.trans.minor_breaks(\n            major, limits\n        )  # pyright: ignore\n    elif isinstance(self.minor_breaks, int):\n        # TODO: Remove ignore when mizani is static typed\n        minor_breaks = self.trans.minor_breaks(\n            major, limits, n=self.minor_breaks\n        )  # pyright: ignore\n    elif (\n        self.minor_breaks is False\n        or self.minor_breaks is None\n        or not len(major)\n    ):\n        minor_breaks = []\n    elif callable(self.minor_breaks):\n        breaks = self.minor_breaks(self.trans.inverse(limits))\n        _major = set(major)\n        minor = self.trans.transform(breaks)\n        minor_breaks = [x for x in minor if x not in _major]\n    else:\n        minor_breaks = self.trans.transform(self.minor_breaks)\n\n    return minor_breaks\n\n\ndef get_labels(DOCS\n    self, breaks=None\n):\n    \"\"\"\n    Generate labels for the axis or legend\n\n    Parameters\n    ----------\n    breaks: None or array-like\n        If None, use self.breaks.\n    \"\"\"\n    if breaks is None:\n        breaks = self.get_breaks()\n\n    breaks = self.inverse(breaks)\n\n    if self.labels is True:\n        labels = self.trans.format(breaks)\n    elif self.labels is False or self.labels is None:\n        labels = []\n    elif callable(self.labels):\n        labels = self.labels(breaks)\n    elif isinstance(self.labels, dict):\n        labels = [\n            str(self.labels[b]) if b in self.labels else str(b)\n            for b in breaks\n        ]\n    else:\n        # When user sets breaks and labels of equal size,\n        # but the limits exclude some of the breaks.\n        # We remove the corresponding labels\n        from collections.abc import Sized\n\n        labels = self.labels\n        if (\n            len(labels) != len(breaks)\n            and isinstance(self.breaks, Sized)\n            and len(labels) == len(self.breaks)\n        ):\n            _wanted_breaks = set(breaks)\n            labels = [\n                lab\n                for lab, b in zip(labels, self.breaks)\n                if b in _wanted_breaks\n            ]\n\n    if len(labels) != len(breaks):\n        raise PlotnineError(\"Breaks and labels are different lengths\")\n\n    return labels\n\n\n# Patch scale_continuous to fix #696\nscale_continuous.get_minor_breaks = get_minor_breaks\nscale_continuous.get_labels = get_labels\n\n\nclass scale_color_prism(scale_discrete):DOCS\n    \"\"\"Prism color scale\n\n    Args:\n        palette: The color palette name\n    \"\"\"\n\n    _aesthetics = [\"color\"]\n    na_value = \"#7F7F7F\"\n\n    def __init__(self, palette=\"colors\", **kwargs):\n        \"\"\"Construct\"\"\"\n        self.palette = prism_color_pal(palette)\n        scale_discrete.__init__(self, **kwargs)\n\n\nclass scale_fill_prism(scale_color_prism):DOCS\n    \"\"\"Prism fill scale\n\n    Args:\n        palette: The fill palette name\n    \"\"\"\n\n    _aesthetics = [\"fill\"]\n    na_value = \"#7F7F7F\"\n\n    def __init__(self, palette=\"colors\", **kwargs):\n        \"\"\"Construct\"\"\"\n        self.palette = prism_fill_pal(palette)\n        scale_discrete.__init__(self, **kwargs)\n\n\nclass scale_shape_prism(scale_discrete):DOCS\n    \"\"\"Prism shape scale\n\n    Args:\n        palette: The shape palette name\n    \"\"\"\n\n    _aesthetics = [\"shape\"]\n\n    def __init__(self, palette=\"default\", **kwargs):\n        \"\"\"Construct\"\"\"\n        self.palette = prism_shape_pal(palette)\n        scale_discrete.__init__(self, **kwargs)\n\n\nscale_colour_prism = scale_color_prism\n</code></pre>"},{"location":"api/source/plotnine_prism.theme/","title":"plotnine_prism.theme","text":""},{"location":"api/source/plotnine_prism.theme/","title":"SOURCE CODE plotnine_prism.theme DOCS","text":"<pre><code>\"\"\"Provides theme_prism\"\"\"\nfrom plotnine.options import get_option\nfrom plotnine.themes.elements import (\n    element_blank,\n    element_line,\n    element_rect,\n    element_text,\n)\nfrom plotnine.themes.theme import theme as theme_abc\n\nfrom .pal import list_themes, theme_colors\n\n# Make sure the themeables work\nfrom .themeable import (  # noqa: F401\n    axis_ticks_x,\n    axis_ticks_y,\n    prism_ticks_length,\n    prism_ticks_length_x,\n    prism_ticks_length_y,\n)\n\n\nclass theme_prism(theme_abc):DOCS\n    \"\"\"The theme_prism() class\n\n    Args:\n        palette: The theme palette\n        base_size: The base size of the plot\n        base_family: The base font family\n        base_fontface: The base font face\n        base_line_size: The base line size\n        base_rect_size: The base rect size\n        axis_text_angle: The default axis text angle\n        border: Whether to show border of the plot\n        **kwargs: Other theming options\n    \"\"\"\n\n    def __init__(\n        self,\n        palette=\"black_and_white\",\n        base_size=10.0,\n        base_family=\"DejaVu Sans\",\n        base_fontface=\"bold\",\n        base_line_size=None,\n        base_rect_size=None,\n        axis_text_angle=0,\n        border=False,\n        **kwargs,\n    ):\n        \"\"\"Construct\"\"\"\n        if axis_text_angle not in (0, 45, 90, 270):\n            raise ValueError(\n                \"'axis_text_angle' must be one of [0, 45, 90, 270].\\n\"\n                \"For other angles, use `guide_axis()` function from plotnine \"\n                \"instead\"\n            )\n\n        if palette not in list_themes():\n            raise ValueError(\n                f\"The palette '{palette}' does not exist. \"\n                f\"Supported palettes are: {list_themes()}\"\n            )\n\n        if base_line_size is None:\n            base_line_size = base_size / 14.0\n        if base_rect_size is None:\n            base_rect_size = base_size / 14.0\n\n        colours = theme_colors(palette)\n        if border:\n            panel_border = element_rect(fill=None)\n            axis_line = element_blank()\n        else:\n            panel_border = element_blank()\n            axis_line = element_line()\n\n        m = get_option(\"base_margin\")\n        kwargs.setdefault(\"line\", element_line(\n            colour=colours.axisColor,\n            size=base_line_size,\n            linetype=\"solid\",\n            lineend=\"butt\",\n        ))\n        kwargs.setdefault(\"rect\", element_rect(\n            fill=\"white\",\n            colour=colours.axisColor,\n            size=base_rect_size,\n            linetype=\"solid\",\n        ))\n        kwargs.setdefault(\"text\", element_text(\n            family=base_family,\n            face=base_fontface,\n            colour=colours.graphTitleColor,\n            size=base_size,\n            lineheight=0.9,\n            hjust=0.5,\n            vjust=0.5,\n            angle=0,\n            margin={},\n        ))\n        kwargs.setdefault(\"dpi\", get_option(\"dpi\"))\n        kwargs.setdefault(\"figure_size\", get_option(\"figure_size\"))\n        kwargs.setdefault(\"prism_ticks_length\", base_size / 5)\n        kwargs.setdefault(\"axis_line\", axis_line)\n        kwargs.setdefault(\"axis_line_x\", None)\n        kwargs.setdefault(\"axis_line_y\", None)\n        kwargs.setdefault(\"axis_text\", element_text(\n            size=0.95 * base_size,\n            colour=colours.axisLabelColor,\n        ))\n        kwargs.setdefault(\"axis_text_x\", element_text(\n            margin={\"t\": 0.8 * base_size},\n            angle=axis_text_angle,\n            hjust=2 if axis_text_angle in (45, 90, 270) else 0.5,\n            vjust=0.5 if axis_text_angle in (0, 90, 270) else 1,\n        ))\n        kwargs.setdefault(\"axis_text_y\", element_text(\n            margin={\"r\": 0.2 * base_size},\n            hjust=1,\n        ))\n        kwargs.setdefault(\"axis_ticks\", element_line())\n        kwargs.setdefault(\"axis_ticks_length\", base_size / 2.5)\n        kwargs.setdefault(\"axis_title\", element_text(\n            colour=colours.axisTitleColor,\n        ))\n        kwargs.setdefault(\"axis_title_x\", element_text(\n            margin={\"t\": 1.2 * base_size},\n        ))\n        kwargs.setdefault(\"axis_title_y\", element_text(\n            margin={\"r\": .5 * base_size},\n            angle=90,\n        ))\n        kwargs.setdefault(\"legend_background\", element_rect(\n            fill=\"None\",\n            colour=\"None\",\n        ))\n        kwargs.setdefault(\"legend_entry_spacing_x\", 5)\n        kwargs.setdefault(\"legend_entry_spacing_y\", 2)\n        kwargs.setdefault(\"legend_key\", element_rect(\n            fill=\"None\",\n            colour=\"None\",\n        ))\n        kwargs.setdefault(\"legend_key_size\", base_size * 0.8 * 1.8)\n        kwargs.setdefault(\"legend_key_height\", 8.5)\n        kwargs.setdefault(\"legend_key_width\", base_size * 1.5)\n        kwargs.setdefault(\"legend_margin\", 0)  # points\n        kwargs.setdefault(\"legend_spacing\", base_size)  # points\n        kwargs.setdefault(\"legend_text\", element_text(\n            size=base_size * 0.75,\n            ha=\"left\",\n            weight=\"normal\",\n            margin={\"t\": 3, \"b\": 3, \"l\": 3, \"r\": 3, \"units\": \"pt\"},\n        ))\n        kwargs.setdefault(\"legend_text_legend\", element_text(\n            va=\"baseline\",\n            weight=\"normal\",\n        ))\n        kwargs.setdefault(\"legend_text_colorbar\", element_text(\n            va=\"center\",\n            weight=\"normal\",\n        ))\n        kwargs.setdefault(\"legend_title\", element_blank())\n        kwargs.setdefault(\"legend_title_align\", \"auto\")\n        kwargs.setdefault(\"legend_position\", \"right\")\n        kwargs.setdefault(\"legend_box\", \"auto\")\n        kwargs.setdefault(\"legend_box_margin\", 0)  # points\n        kwargs.setdefault(\"legend_box_just\", \"auto\")\n        kwargs.setdefault(\"legend_box_spacing\", 0.1)  # In inches\n        kwargs.setdefault(\"legend_direction\", \"vertical\")\n        kwargs.setdefault(\"aspect_ratio\", \"auto\")\n        kwargs.setdefault(\"strip_align\", 0)\n        kwargs.setdefault(\"strip_align_x\", 0)\n        kwargs.setdefault(\"panel_background\", element_rect(\n            fill=colours.plottingAreaColor if palette == \"office\" else \"None\",\n            colour=None,\n        ))\n        kwargs.setdefault(\"panel_border\", panel_border)\n        kwargs.setdefault(\"panel_grid\", element_blank())\n        kwargs.setdefault(\"panel_grid_minor\", element_blank())\n        kwargs.setdefault(\"panel_spacing\", 4 * base_size / 3.0)\n        kwargs.setdefault(\"panel_spacing_x\", None)\n        kwargs.setdefault(\"panel_spacing_y\", None)\n        kwargs.setdefault(\"panel_ontop\", False)\n        kwargs.setdefault(\"strip_background\", element_blank())\n        kwargs.setdefault(\"strip_text\", element_text(\n            colour=colours.axisTitleColor,\n            # size = rel(0.8),\n            size=0.8 * base_size,\n            margin={\n                \"t\": base_size / 2.5,\n                \"b\": base_size / 2.5,\n                \"l\": base_size / 2.5,\n                \"r\": base_size / 2.5,\n            },\n        ))\n        kwargs.setdefault(\"strip_text_x\", element_text(\n            margin={\"t\": base_size / 3},\n        ))\n        kwargs.setdefault(\"strip_text_y\", element_text(\n            angle=-90,\n            margin={\"l\": base_size / 3},\n        ))\n        kwargs.setdefault(\"plot_background\", element_rect(\n            fill=colours.pageBackgroundColor,\n            colour=colours.pageBackgroundColor,\n        ))\n        kwargs.setdefault(\"plot_title\", element_text(\n            size=1.2 * base_size,\n            hjust=0.5,\n            vjust=1,\n            margin={\"b\": base_size},\n        ))\n        kwargs.setdefault(\"plot_caption\", element_text(\n            size=0.8,\n            hjust=1,\n            vjust=1,\n            margin={\"t\": base_size / 2},\n        ))\n        kwargs.setdefault(\"plot_margin\", m * 2)\n\n        theme_abc.__init__(self, complete=True, **kwargs)\n</code></pre>"},{"location":"api/source/plotnine_prism.themeable/","title":"plotnine_prism.themeable","text":""},{"location":"api/source/plotnine_prism.themeable/","title":"SOURCE CODE plotnine_prism.themeable DOCS","text":"<pre><code>\"\"\"Add themeables for theme_prism\"\"\"\n\nfrom contextlib import suppress\nfrom copy import deepcopy\nfrom plotnine.themes.themeable import (\n    themeable as themeable_abc,\n    axis_ticks_major_x,\n    axis_ticks_major_y,\n    axis_ticks_minor_x,\n    axis_ticks_minor_y,\n)\n\n\nclass axis_ticks_x(axis_ticks_major_x, axis_ticks_minor_x):DOCS\n    \"\"\"Themeable for ticks on x axis that is missing in plotnine\"\"\"\n\n    def apply_ax(self, ax):DOCS\n        \"\"\"Apply themeable to the axis\"\"\"\n        axis_ticks_major_x.apply_ax(self, ax)\n        axis_ticks_minor_x.apply_ax(self, ax)\n\n    def blank_ax(self, ax):DOCS\n        \"\"\"When it's set blank\"\"\"\n        axis_ticks_major_x.blank(self, ax)\n        axis_ticks_minor_x.blank(self, ax)\n\n\nclass axis_ticks_y(axis_ticks_major_y, axis_ticks_minor_y):DOCS\n    \"\"\"Themeable for ticks on y axis that is missing in plotnine\"\"\"\n\n    def apply_ax(self, ax):DOCS\n        \"\"\"Apply themeable to the axis\"\"\"\n        axis_ticks_major_y.apply_ax(self, ax)\n        axis_ticks_minor_y.apply_ax(self, ax)\n\n    def blank_ax(self, ax):DOCS\n        \"\"\"When it's set blank\"\"\"\n        axis_ticks_major_y.blank(self, ax)\n        axis_ticks_minor_y.blank(self, ax)\n\n\nclass prism_ticks_length_x(themeable_abc):DOCS\n    \"\"\"Themeable for ticks length on x axis\"\"\"\n\n    def apply_ax(self, ax):DOCS\n        \"\"\"Apply themeable to the axis\"\"\"\n        themeable_abc.apply_ax(self, ax)\n\n        d = deepcopy(self.properties)\n        with suppress(KeyError):\n            length = d.pop(\"value\")\n            ax.xaxis.set_tick_params(\n                which=\"minor\",\n                length=abs(length),\n                direction=\"in\" if length &lt; 0 else \"out\",\n            )\n\n        for tick in ax.xaxis.get_minor_ticks():\n            tick.tick1line.set(**d)\n\n    def blank_ax(self, ax):DOCS\n        \"\"\"When it's set blank\"\"\"\n        themeable_abc.blank(self, ax)\n        ax.xaxis.set_tick_params(which=\"minor\", bottom=False)\n\n\nclass prism_ticks_length_y(themeable_abc):DOCS\n    \"\"\"Themeable for ticks length on y axis\"\"\"\n\n    def apply_ax(self, ax):DOCS\n        \"\"\"Apply themeable to the axis\"\"\"\n        themeable_abc.apply_ax(self, ax)\n\n        d = deepcopy(self.properties)\n        with suppress(KeyError):\n            length = d.pop(\"value\")\n            ax.yaxis.set_tick_params(\n                which=\"minor\",\n                length=abs(length),\n                direction=\"in\" if length &lt; 0 else \"out\",\n            )\n\n        for tick in ax.yaxis.get_minor_ticks():\n            tick.tick1line.set(**d)\n\n    def blank_ax(self, ax):DOCS\n        \"\"\"When it's set blank\"\"\"\n        themeable_abc.blank(self, ax)\n        ax.yaxis.set_tick_params(which=\"minor\", bottom=False)\n\n\nclass prism_ticks_length(prism_ticks_length_x, prism_ticks_length_y):DOCS\n    \"\"\"Themeable for ticks length\"\"\"\n\n    def apply_ax(self, ax):DOCS\n        \"\"\"Apply themeable to the axis\"\"\"\n        prism_ticks_length_x.apply_ax(self, ax)\n        prism_ticks_length_y.apply_ax(self, ax)\n\n    def blank_ax(self, ax):DOCS\n        \"\"\"When it's set blank\"\"\"\n        prism_ticks_length_x.blank(self, ax)\n        prism_ticks_length_y.blank(self, ax)\n</code></pre>"},{"location":"raw/","title":"README","text":"<pre><code>%%capture\n\nfrom plotnine import *\nfrom plotnine_prism import *\n\nfrom nb_helpers import ToothGrowth\n</code></pre> <pre><code>base = (\n    ggplot(ToothGrowth, aes(x = \"dose\", y = \"len\")) +\n    geom_violin(aes(colour = \"dose\", fill = \"dose\"), trim = False) +\n    geom_boxplot(aes(fill = \"dose\"), width = 0.2, colour = \"black\")\n)\n</code></pre> <pre><code>p1 = base + ylim(-5, 40)\np2 = (\n    base +\n    scale_y_continuous(limits=[-5, 40], guide=guide_prism_offset_minor()) +\n    scale_color_prism('floral') +\n    scale_fill_prism('floral') +\n    theme_prism()\n)\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre>"},{"location":"raw/axes/","title":"Changing Axes","text":"<pre><code>%%capture\n\nimport patchworklib as pw\nfrom plotnine import *\nfrom plotnine_prism import *\nfrom datar.base import seq, rep\n\n%run nb_helpers.py\n</code></pre> <pre><code># Minor ticks are on by default in plotnine\n\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n    + theme(legend_position=\"none\")\n)\n\n# to turn it off\np1 = p + scale_y_continuous(guide=guide_prism())\n# to turn it on again\np2 = p + scale_y_continuous(guide=guide_prism_minor())\n# or\np3 = p + guides(y = \"prism_minor\")\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb3 = pw.load_ggplot(p3)\n(b1 | b2) / (b3)\n</code></pre> <pre><code># compare 1 minor ticks (default) vs 4 minor ticks per major tick\np = (\n    ggplot(ToothGrowth, aes(x=\"dose\", y=\"len\"))\n    + stat_summary(\n        aes(fill=\"dose\"),\n        na_rm=True,\n        geom=\"col\",\n        fun_y=numpy.mean,\n        colour=\"black\",\n        size=0.9,\n    )\n    + theme_prism()\n)\n\np1 = p + scale_y_continuous(\n    guide=guide_prism_minor(),\n    limits=(0, 30),\n    expand=(0, 0),\n)\np2 = p + scale_y_continuous(\n    guide=guide_prism_minor(),\n    limits=(0, 30),\n    expand=(0, 0),\n    minor_breaks=seq(0, 30, 2),\n)\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code># log10 minor ticks\n\np = (\n    ggplot(msleep, aes(\"bodywt\", \"brainwt\"))\n    + geom_point(na_rm=True)\n    + theme_prism()\n)\n\n# log10 minor ticks added automatically\np1 = p + scale_x_log10(\n    limits=(1e0, 1e4),\n    guide=guide_prism_minor(),\n)\n# get back to normal minor ticks\np2 = p + scale_x_log10(\n    limits=(1e0, 1e4),\n    minor_breaks=[10**.5, 10**1.5, 10**2.5, 10**3.5],\n    guide=guide_prism_minor(),\n)\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code># change minor tick length\np = (\n    ggplot(ToothGrowth, aes(x=\"dose\", y=\"len\"))\n    + stat_summary(\n        aes(fill=\"dose\"),\n        na_rm=True,\n        geom=\"col\",\n        fun_y=numpy.mean,\n        colour=\"black\",\n        size=0.9,\n    )\n    + theme_prism()\n    + scale_y_continuous(\n        guide=guide_prism_minor(),\n        limits=(0, 30),\n        expand=(0, 0),\n        minor_breaks=seq(0, 30, 2),\n    )\n)\n\np1 = p + theme(legend_position=\"none\")\np2 = p + theme(legend_position=\"none\", prism_ticks_length_y=20)\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code># change minor tick length\np1 = p + theme(legend_position=\"none\", prism_ticks_length_y=20)\np2 = p + theme(legend_position=\"none\", prism_ticks_length_y=-20)\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code># change how ticks look\n\np1 = p + theme(legend_position=\"none\")\np2 = p + theme(\n    legend_position=\"none\",\n    axis_ticks_y=element_line(size=6, color=\"blue\"),\n)\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code># show that offset axis looks better when you specify the axis limits\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n    # guides not working without legend in plotnine\n    # + theme(legend_position=\"none\")\n)\n\n\np1 = p + scale_y_continuous(guide=guide_prism_offset())\np2 = p + scale_y_continuous(limits=(0, 40), guide=guide_prism_offset())\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># change appearance of offset axis\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n    + scale_y_continuous(limits=(0, 40), guide=guide_prism_offset())\n)\n\np1 = p\np2 = p + theme(axis_line_y=element_line(colour=\"blue\", size=4))\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># compare prism_minor with prism_offset_minor\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n)\n\np1 = p + scale_y_continuous(guide=guide_prism_offset())\np2 = p + scale_y_continuous(guide=guide_prism_offset_minor())\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># As with guide_prism_offset(), the axis tends to look better\n# if you explicitly set the axis limits.\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n)\n\np1 = p + scale_y_continuous(guide=guide_prism_offset_minor())\np2 = p + scale_y_continuous(limits=(0, 40), guide=guide_prism_offset_minor())\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># compare 1 minor tick to 4 minor ticks per major\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n)\n\np1 = p + scale_y_continuous(\n    limits=(0, 40),\n    guide=guide_prism_offset_minor(),\n)\np2 = p + scale_y_continuous(\n    limits=(0, 40),\n    minor_breaks=seq(0, 40, 2),\n    guide=guide_prism_offset_minor(),\n)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># change minor tick length and direction\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n    + scale_y_continuous(\n        limits=(0, 40),\n        minor_breaks=seq(0, 40, 2),\n        guide=guide_prism_offset_minor(),\n    )\n)\n\np1 = p + theme(prism_ticks_length_y=20)\np2 = p + theme(prism_ticks_length_y=-20)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># change minor tick length and direction\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(fill=\"supp\"))\n    + theme_prism()\n    + scale_y_continuous(\n        limits=(0, 40),\n        minor_breaks=seq(0, 40, 2),\n        guide=guide_prism_offset_minor(),\n    )\n)\n\np1 = p + theme(prism_ticks_length_y=20)\np2 = p + theme(\n    prism_ticks_length_y=20,\n    axis_ticks_y=element_line(size=10),\n)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># define a base plot\nfrom datar.data import mpg\nbase = ggplot(mpg, aes(x=\"displ\", y=\"cty\")) + geom_point(aes(colour=\"class\"))\n\nbase\n</code></pre> <pre>\n<code>&lt;Figure Size: (400 x 400)&gt;</code>\n</pre> <pre><code># apply theme_prism and turn clipping off for the border\np = (\n    base\n    + theme_prism(border=True)\n    + theme(legend_position=(0.75, 0.65))\n    + coord_cartesian()\n    + scale_x_continuous(guide=guide_prism())\n    + scale_y_continuous(guide=guide_prism())\n)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (400 x 400)&gt;</code>\n</pre> <pre><code># get minor ticks back\np = (\n    base\n    + theme_prism(border=True)\n    + theme(legend_position=(0.75, 0.65))\n    + coord_cartesian()\n    + scale_x_continuous(guide=guide_prism_minor())\n    + scale_y_continuous(guide=guide_prism_minor())\n)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (400 x 400)&gt;</code>\n</pre>"},{"location":"raw/axes/#minor-ticks","title":"Minor ticks","text":""},{"location":"raw/axes/#offset-axis","title":"Offset axis","text":""},{"location":"raw/axes/#border-with-minor-ticks","title":"Border with minor ticks","text":""},{"location":"raw/colours/","title":"Color, Fill and Shape Palettes","text":"<pre><code>%%capture\n\nimport patchworklib as pw\nfrom plotnine import *\nfrom plotnine_prism import *\n%run nb_helpers.py\n</code></pre> <pre><code># create a base plot to compare colour scales\nbase = (ggplot(mtcars, aes(x = \"wt\", y = \"mpg\")) +\n  geom_point(aes(colour = \"cyl\", shape = \"cyl\"), size = 3) + \n  theme_prism() + \n  theme(legend_position = (0.8, 0.8)))\n\nbase\n</code></pre> <pre>\n<code>&lt;Figure Size: (400 x 400)&gt;</code>\n</pre> <pre><code># compare manual colour scale with prism colour scale\np1 = base + scale_colour_manual(values = (\"blue\", \"red\", \"green\"))\np2 = base + scale_colour_prism()\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code>print(str(list_color_pals()))\n</code></pre> <pre>\n<code>['autumn_leaves', 'beer_and_ales', 'black_and_white', 'blueprint', 'candy_bright', 'candy_soft', 'colorblind_safe', 'colors', 'diazo', 'earth_tones', 'evergreen', 'fir', 'flames', 'floral', 'greenwash', 'inferno', 'magma', 'mustard_field', 'muted_rainbow', 'neon', 'ocean', 'office', 'pastels', 'pearl', 'plasma', 'prism_dark', 'prism_light', 'purple_passion', 'quiet', 'shades_of_gray', 'spring', 'stained_glass', 'starry', 'summer', 'sunny_garden', 'the_blues', 'viridis', 'warm_and_sunny', 'warm_pastels', 'waves', 'winter_bright', 'winter_soft', 'wool_muffler']\n</code>\n</pre> <pre><code># try out some different colour palettes\np1 = base + scale_colour_prism(palette = \"purple_passion\")\np2 = base + scale_colour_prism(palette = \"candy_bright\")\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code># create a base plot to compare fill scales\nbase = (\n    ggplot(mtcars, aes(x=\"wt\", y=\"mpg\"))\n    + geom_point(aes(fill=\"cyl\", shape=\"cyl\"), size=3)\n    + theme_prism()\n    + theme(legend_position=(0.8, 0.8))\n    + scale_shape_prism(palette=\"filled\")\n)\n\nbase\n</code></pre> <pre>\n<code>&lt;Figure Size: (400 x 400)&gt;</code>\n</pre> <pre><code># compare manual fill scale with prism fill scale\np1 = base + scale_fill_manual(values = (\"blue\", \"red\", \"green\"))\np2 = base + scale_fill_prism()\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code>print(str(list_fill_pals()))\n</code></pre> <pre>\n<code>['autumn_leaves', 'beer_and_ales', 'black_and_white', 'blueprint', 'candy_bright', 'candy_soft', 'colorblind_safe', 'colors', 'diazo', 'earth_tones', 'evergreen', 'fir', 'flames', 'floral', 'greenwash', 'inferno', 'magma', 'mustard_field', 'muted_rainbow', 'neon', 'ocean', 'office', 'pastels', 'pearl', 'plasma', 'prism_dark', 'prism_light', 'purple_passion', 'quiet', 'shades_of_gray', 'spring', 'stained_glass', 'starry', 'summer', 'sunny_garden', 'the_blues', 'viridis', 'warm_and_sunny', 'warm_pastels', 'waves', 'winter_bright', 'winter_soft', 'wool_muffler']\n</code>\n</pre> <pre><code># try out some different fill palettes\np1 = base + scale_fill_prism(palette = \"colorblind_safe\")\np2 = base + scale_fill_prism(palette = \"neon\")\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb1 | b2\n</code></pre> <pre><code>list_shape_pals()\n</code></pre> <pre>\n<code>['complete', 'default', 'filled']</code>\n</pre> <pre><code>def show_shapes(palette):\n    import warnings\n    from datar.base import rep, ceiling, seq\n    from plotnine_prism.pal import prism_shape_pal\n    warnings.simplefilter('ignore')\n\n    pal = prism_shape_pal(palette)(100)\n    ncol = 4\n    nrow = int(ceiling(len(pal) / 4.0))\n    df = tibble(\n        x=rep(seq(ncol), nrow)[: len(pal)],\n        y_shape=rep([1, 3, 5, 7], each=ncol)[: len(pal)],\n        y_label=rep([2, 4, 6, 8], each=ncol)[: len(pal)],\n        shape=pal,\n    )\n\n    return (\n        ggplot(df, aes(x=\"x\"))\n        + geom_point(aes(y=\"y_shape\", shape=\"shape\"), size=5)\n        + scale_shape_identity() \n        + geom_text(aes(y=\"y_label\", label=\"shape\"))\n        + theme_void()\n        + theme(\n            panel_background=element_rect(fill=\"gray\"), \n            legend_position=\"none\",\n        )\n    )\n\n\np1 = show_shapes(\"complete\")\np2 = show_shapes(\"default\")\np3 = show_shapes(\"filled\")\n\nb1 = pw.load_ggplot(p1)\nb2 = pw.load_ggplot(p2)\nb3 = pw.load_ggplot(p3)\nb1 | b2 | b3\n</code></pre> <pre><code># create a base plot to compare shape scales\nfrom datar.data import mpg\n\nbase = (\n    ggplot(mpg, aes(x=\"displ\", y=\"cty\"))\n    + geom_point(aes(colour=\"class\", fill=\"class\", shape=\"class\"))\n    + theme_prism(base_size=11, base_fontface=\"plain\", border=True)\n    + theme(\n        legend_position=(0.72, 0.7),\n        legend_key_height=8,\n    )\n    + coord_cartesian()\n    + scale_colour_prism(palette=\"floral\")\n    + scale_fill_prism(palette=\"floral\")\n)\n\nbase\n</code></pre> <pre>\n<code>&lt;Figure Size: (400 x 400)&gt;</code>\n</pre> <pre><code># compare shape scales\np1 = base\np2 = base + scale_shape_prism(palette=\"default\") \np3 = base + scale_shape_prism(palette=\"filled\") \np4 = base + scale_shape_prism(palette=\"complete\")\n\nprint(p1, p2, p3, p4)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code> </code>\n</pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre>"},{"location":"raw/colours/#color-scales","title":"Color scales","text":""},{"location":"raw/colours/#fill-scales","title":"Fill scales","text":""},{"location":"raw/colours/#shape-scales","title":"Shape scales","text":""},{"location":"raw/ex1-dose/","title":"Dose Reponse Curve","text":"<pre><code>from datar.all import (\n    f,\n    tibble,\n    c,\n    NA,\n    head,\n    mutate,\n    log10,\n    pivot_longer,\n    is_na,\n    filter_,\n    rep,\n    seq,\n    paste0\n)\nfrom plotnine import *\nfrom plotnine_prism import *\n\n%run nb_helpers.py\n\nset_option(\"figure_size\", (6, 4))\n\ndf = (\n    tibble(\n        agonist=c(\n            1e-10, 1e-8, 3e-8, 1e-7, 3e-7, 1e-6, 3e-6, 1e-5, 3e-5, 1e-4, 3e-4\n        ),\n        ctr1=c(0, 11, 125, 190, 258, 322, 354, 348, NA, 412, NA),\n        ctr2=c(3, 33, 141, 218, 289, 353, 359, 298, NA, 378, NA),\n        ctr3=c(2, 25, 160, 196, 345, 328, 369, 372, NA, 399, NA),\n        trt1=c(3, NA, 11, 52, 80, 171, 289, 272, 359, 352, 389),\n        trt2=c(5, NA, 25, 55, 77, 195, 230, 333, 306, 320, 338),\n        trt3=c(4, NA, 28, 61, 44, 246, 243, 310, 297, 365, NA),\n    )\n    &amp;gt;&amp;gt; mutate(log_agonist=log10(f.agonist))\n    &amp;gt;&amp;gt; pivot_longer(\n        [~f.agonist, ~f.log_agonist],\n        names_pattern=r\"(.{3})([0-9])\",\n        names_to=[\"treatment\", \"rep\"],\n        values_to=\"response\",\n    )\n    &amp;gt;&amp;gt; filter_(~is_na(f.response))\n)\n\ndf &amp;gt;&amp;gt; head()\n</code></pre> agonist log_agonist treatment rep response &lt;float64&gt; &lt;float64&gt; &lt;object&gt; &lt;object&gt; &lt;float64&gt; 0 1.000000e-10 -10.000000 ctr 1 0.0 1 1.000000e-08 -8.000000 ctr 1 11.0 2 3.000000e-08 -7.522879 ctr 1 125.0 3 1.000000e-07 -7.000000 ctr 1 190.0 4 3.000000e-07 -6.522879 ctr 1 258.0 5 1.000000e-06 -6.000000 ctr 1 322.0 <pre>\n<code>&lt;Figure size 100x100 with 0 Axes&gt;</code>\n</pre> <pre><code>p = (\n    ggplot(df, aes(x=\"log_agonist\", y=\"response\")) +\n    geom_smooth(\n        aes(colour=\"treatment\"),\n        se=False,\n        method=nls,\n        method_args=dict(minv=1.67, maxv=397, ec50=-7, hill_coeff=1)\n    )\n)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (600 x 400)&gt;</code>\n</pre> <pre><code># apply a manual colour scale to the curves\np = p + scale_colour_manual(\n  labels = c(\"No inhibitor\", \"Inhibitor\"),\n  values = c(\"#00167B\", \"#9FA3FE\")\n)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (600 x 400)&gt;</code>\n</pre> <pre><code># reset the colour scale, add the data points, then use a new colour scale\np = (\n    p\n    + geom_point(aes(colour=\"treatment\", shape=\"treatment\"), size=3)\n    + scale_colour_prism(\n        palette=\"winter_bright\", labels=c(\"No inhibitor\", \"Inhibitor\")\n    )\n    + scale_shape_prism(labels=c(\"No inhibitor\", \"Inhibitor\"))\n)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (600 x 400)&gt;</code>\n</pre> <pre><code># use the Winter Bright theme and make the size of all plot elements larger\np = p + theme_prism(palette = \"winter_bright\", base_size = 12)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (600 x 400)&gt;</code>\n</pre> <pre><code># adjust the axis limits, major tick positions, and axis guide\np = p + scale_y_continuous(\n  limits = c(-100, 500), \n  breaks = seq(-100, 500, 100),\n  guide = guide_prism_offset()\n)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (600 x 400)&gt;</code>\n</pre> <pre><code># adjust the axis limits, major and minor tick positions, axis guide, and\n# axis text (aka. label) appearance\np = p + scale_x_continuous(\n    limits=c(-10, -3),\n    breaks=seq(-10, -3),\n    guide=guide_prism_offset_minor(),\n    minor_breaks=log10(rep(seq(1, 9), 7) * (10. ** rep(seq(-10, -4), each=9))),\n    labels=paste0(\"e\", seq(-10, -3))\n)\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (600 x 400)&gt;</code>\n</pre> <pre><code># remove the y axis title and legend title, change the x axis title and\n# move the legend to the top left\np = p + theme(\n  axis_title_y = element_blank(),\n  legend_title = element_blank(),\n  legend_position = (0.25, 0.8),\n#   legend_justification = c(0.05, 0.95)\n) + labs(x = \"[Agonist], M\")\np\n</code></pre> <pre>\n<code>&lt;Figure Size: (600 x 400)&gt;</code>\n</pre>"},{"location":"raw/get_started/","title":"Getting Started","text":"<pre><code>%%capture\n\nimport numpy\nfrom plotnine import *\nfrom plotnine_prism import *\n\n%run nb_helpers.py\n</code></pre> <pre><code># compare theme_grey() to theme_prism()\np1 = (\n    ggplot(ToothGrowth, aes(x=\"dose\", y=\"len\"))\n    + stat_summary(\n        aes(fill=\"dose\"),\n        na_rm=True,\n        geom=\"col\",\n        fun_y=numpy.mean,\n        colour=\"black\",\n        size=0.9,\n    )\n    + scale_y_continuous(limits=[0, 30], expand=[0, 0])\n)\n\np2 = p1 + theme_prism(base_size=12)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># compare some of the available theme palettes\np3 = p1 + theme_prism(palette=\"mustard_field\", base_size=12)\np4 = p1 + theme_prism(palette=\"flames\", base_size=12)\n\nprint(p3, p4)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># compare some colour and fill palettes with default theme_prism()\np = (\n    ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\"))\n    + geom_boxplot(aes(colour=\"supp\", fill=\"supp\"))\n    + theme_prism(base_size=12)\n)\n\np1 = (\n    p\n    + scale_colour_prism(palette=\"floral\")\n    + scale_fill_prism(palette=\"floral\")\n)\n\np2 = (\n    p\n    + scale_colour_prism(palette=\"flames\")\n    + scale_fill_prism(palette=\"flames\")\n)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># try using the same palette for colour, fill, and theme\np = ggplot(ToothGrowth, aes(x=\"supp\", y=\"len\")) + geom_boxplot(\n    aes(colour=\"supp\", fill=\"supp\")\n)\n\np3 = (\n    p\n    + theme_prism(palette=\"candy_bright\")\n    + scale_colour_prism(palette=\"candy_bright\")\n    + scale_fill_prism(palette=\"candy_bright\")\n)\n\np4 = (\n    p\n    + theme_prism(palette=\"neon\")\n    + scale_colour_prism(palette=\"neon\")\n    + scale_fill_prism(palette=\"neon\")\n)\n\nprint(p3, p4)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># compare ggplot2 default shape order with ggprism default shape order\np1 = (\n    ggplot(msleep, aes(x = \"sleep_rem\", y = \"sleep_total\")) + \n    geom_point(aes(shape = \"vore\"), size = 3) + \n    theme_prism() + \n    theme(axis_title_y = element_blank())\n)\n\np2 = p1 + scale_shape_prism()\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># show the 4 different axis guides included in plotnine_prism\np = (\n    ggplot(ToothGrowth, aes(x=\"dose\", y=\"len\"))\n    + geom_jitter(aes(shape=\"dose\"), width=0.2, size=2)\n    + scale_shape_prism()\n    + theme_prism()\n    # + theme(legend_position=\"none\")\n)\n\np1 = p + scale_y_continuous(limits=[0, 40], guide=guide_prism())\np2 = p + scale_y_continuous(limits=[0, 40], guide=guide_prism_minor())\np3 = p + scale_y_continuous(limits=[0, 40], guide=guide_prism_offset())\np4 = p + scale_y_continuous(limits=[0, 40], guide=guide_prism_offset_minor())\n\nprint(p1, p2, p3, p4)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code> </code>\n</pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre>"},{"location":"raw/themes/","title":"Themes","text":"<pre><code>%%capture\n\nfrom datar.datasets import mpg\nfrom plotnine import *\nfrom plotnine_prism import *\n\n%run nb_helpers.py\n</code></pre> <pre><code>base = ggplot(mpg, aes(x=\"displ\", y=\"cty\")) + geom_point(aes(colour=\"class\"))\n\nbase\n</code></pre> <pre>\n<code>&lt;Figure Size: (400 x 400)&gt;</code>\n</pre> <pre><code># apply default theme\np1 = (\n    base\n    + theme_prism()\n    + theme(\n        legend_position=(0.8, 0.7),\n        legend_key_height=10,\n    )\n)\np2 = (\n    base\n    + theme_prism()\n    + theme(\n        legend_position=(0.8, 0.7),\n        legend_key_height=10,\n        legend_title=element_text(margin={'b': 8}),\n    )\n)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># redefine base plot without a legend for convenience\nbase = ggplot(mpg, aes(x=\"displ\", y=\"cty\")) + geom_point(\n    aes(colour=\"class\"), show_legend=False\n)\n\n# adjust overall theme size\np1 = base + theme_prism(base_size=10)\np2 = base + theme_prism(base_size=16)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># adjust overall theme size with specific line size\np1 = base + theme_prism(base_size = 12)\np2 = base + theme_prism(base_size = 12, base_line_size = 0.2)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># change fontface or font family\np1 = base + theme_prism(base_fontface = \"plain\")\np2 = base + theme_prism(base_family = \"monospace\")\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># change x axis text angle\np1 = base + theme_prism(axis_text_angle = 45)\np2 = base + theme_prism(axis_text_angle = 90)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># add a border and adjust its thickness\np1 = base + theme_prism(border=True) + coord_cartesian()\np2 = (\n    base\n    + theme_prism(border=True, base_rect_size=4)\n    + coord_cartesian()  # adjust thickness\n)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># Theme palettes\n\ndisplay(str(list_themes()))\n</code></pre> <pre>\n<code>\"['autumn_leaves', 'pearl', 'viridis', 'winter_soft', 'candy_bright', 'the_blues', 'warm_pastels', 'plasma', 'spring', 'floral', 'inferno', 'quiet', 'office', 'waves', 'stained_glass', 'shades_of_gray', 'fir', 'black_and_white', 'ocean', 'purple_passion', 'candy_soft', 'colors', 'summer', 'winter_bright', 'greenwash', 'prism_light', 'wool_muffler', 'blueprint', 'diazo', 'beer_and_ales', 'sunny_garden', 'evergreen', 'neon', 'mustard_field', 'earth_tones', 'pastels', 'colorblind_safe', 'muted_rainbow', 'flames', 'prism_dark', 'starry', 'magma', 'warm_and_sunny']\"</code>\n</pre> <pre><code># try out some different theme palettes\np1 = base + theme_prism(palette = \"purple_passion\")\np2 = base + theme_prism(palette = \"candy_bright\")\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># compare two identical theme palettes\np1 = base + theme_prism(palette = \"black_and_white\")\np2 = base + theme_prism(palette = \"plasma\")\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># try out two more theme palettes and their corresponding colour palettes\np1 = base + theme_prism(palette=\"summer\") + scale_colour_prism(palette=\"summer\")\np2 = (\n    base\n    + theme_prism(palette=\"stained_glass\")\n    + scale_colour_prism(palette=\"stained_glass\")\n)\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre> <pre><code># Custom a new theme based on \"theme_prism\"\n\ndef theme_new(\n    base_size=10,\n    base_family=\"monospace\",\n    base_fontface=\"bold\",\n    base_line_size=None,\n    base_rect_size=None,\n    axis_text_angle=0,\n    border=False,\n):\n    return theme_prism(\n        palette=\"stained_glass\",\n        base_size=base_size,\n        base_family=base_family,\n        base_fontface=base_fontface,\n        base_line_size=base_line_size,\n        base_rect_size=base_rect_size,\n        axis_text_angle=axis_text_angle,\n        border=border,\n    ) + theme(\n        panel_background=element_rect(fill=\"white\", colour=\"None\"),\n        plot_background=element_rect(fill=\"red\", colour=\"None\"),\n        axis_line=element_line(colour=\"black\"),\n        axis_ticks=element_line(colour=\"black\"),\n    )\n</code></pre> <pre><code># compare theme_prism() and our new theme function\np1 = base + theme_prism()\np2 = base + theme_new()\n\nprint(p1, p2)\n</code></pre> <pre>\n<code> </code>\n</pre> <pre>\n<code>\n</code>\n</pre>"}]}